<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uNick&#39;s Blog</title>
  
  <subtitle>前端誤連網</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-19T08:37:59.985Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>半路出家的前端工程師面試 - 揪竟什麼是 Senior ?</title>
    <link href="http://yoursite.com/2018/08/19/f2e-interview/"/>
    <id>http://yoursite.com/2018/08/19/f2e-interview/</id>
    <published>2018-08-19T06:20:37.000Z</published>
    <updated>2018-08-19T08:37:59.985Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://az505806.vo.msecnd.net/cms/7df5abd1-eac0-49da-86a2-424f44ea95e7/a200a1f9-23c0-4c67-b74b-9bbc2ebd5b06-lg.jpg" alt=""><br>擔任前端工程師一年多，吸收了日月精華後，為了回顧這一年的經驗值成長，我本來就預計要來個巡迴面試讓市場估一下現在自己的身價如何，來看看是不是當一個網路工程師就一定要有「本科出身」的天命才能勝任，於是最近就默默開始莫名的請假 … ⁉️</p><a id="more"></a><p>去年轉職的面試心得是寫在 <a href="http://unicklin-blog.logdown.com/posts/1961314-halfway-decent-front-end-engineers-interview" target="_blank" rel="noopener">Logdown</a>，當時面試了大概十家左右，抱著初出茅廬的羔羊姿態到處被洗臉，原本在製造業的我也見識到資訊領域的面試是什麼型態。</p><p>而今年在心態上我就有很大的變化，因為目的不是以就職為主 (當然有遇到兩情相悅的還是可以給彼此一個機會💘)，比較著重在想知道所謂普遍 Senior 的程度和定義為何，可能也仗著現在本身就有工作所以面試時會大膽一點的討論😅</p><p>首先先介紹自己的能力 (以求職網上常見的需求列出)：<br><img src="https://obs.line-scdn.net/0hraG3jkDCLU56SgOHpAJSGTUXKyEDKTdGEDI6dA8cJ2APJjpOEjA-eAMSMDoSJDUEBCRhKyw8cCInAQ9uQVE_SwEtFwsMH2x6EEwwbT0SBi1Lem8RQCVmK11Ke35fL2kYRy9kbV5OJy4AKmtP/small" alt=""></p><ul><li>HTML5, CSS3</li><li>RWD</li><li>前端任一框架: Vue</li><li>熟悉 ES6</li><li>build system: gulp, webpack</li><li>解決跨瀏覽器問題</li><li>串接 api 經驗</li><li>熟悉 git 版控</li></ul><p>再來是我個人覺得可以寫上去的一些經驗</p><ul><li>自己玩過前端測試：e2e - cypress, unit - jest</li><li>PWA 作品</li><li>有後端經驗(Ruby on Rails)</li></ul><h2 id="FunNow"><a href="#FunNow" class="headerlink" title="FunNow"></a><a href="https://www.myfunnow.com/" target="_blank" rel="noopener">FunNow</a></h2><p>新創公司，產品定位有點像 EZtable 但功能更強大預約 app，服務的層面很廣，從飲食到住宿甚至球賽都有，因為剛獲創投資金正在廣納人才。面試當天先寫了一份忘了是性向測驗還是智力測驗的題目，就是很多形狀或圖形要判斷空格內應該填入哪個圖形的考題，總共 15 題只寫了 11 題瞬間覺得原來我智能不足 … 技術部份倒是沒有考試，面試的前端說太忙了沒時間出，之後如果錄取可能要先 full-stack 等人手補足才會好好的整頓一下負責工作，他們後端目前是用 php 但預計轉向 golang。面談期間其實蠻輕鬆的，大概 demo 一下作品跟自己的部落格、網站，然後聊聊前端在公司內的定位(因為主要產品是 app)，也有提到說不是資訊科不懂一些 CS 可能會比較辛苦等等。最後突然拋出説不然來考一下試好了 !?(馬上荒髒😱)，一題是從陣列隨機拋三個不重複的數出來，第二個是去年的夢靨：費氏數列(真的很費事)，這部分就跟他帶過一下自己有寫過但真的不熟 … 總之，人手看起來是很缺，但也因為產品要衝刺我覺得新人也會慎選不會太隨便，所以不是很有把握。</p><h2 id="Stockfeel-股感"><a href="#Stockfeel-股感" class="headerlink" title="Stockfeel 股感"></a><a href="https://www.stockfeel.com.tw/" target="_blank" rel="noopener">Stockfeel 股感</a></h2><p>這間是在數字網看到的，展示的工作環境看起來很不錯就投了，後來才知道公司已經搬家，現在完全不一樣 … (詐騙)。同時面試一個人資兩個前端，大概展示一下作品然後自我介紹之後那個人資就批哩啪拉的一直講他們公司在幹嘛做什麼的，也不管人家受不受得了，我大概第三句的斷線了😐，但其實斷線的主要原因是聽到要跟各大金融業合作，眾所皆知金融業系統老舊還有那個人見人怕的 Internet Explorer，興致垂直驟減 (現任公司要支援挨伊就很讓人暴走了還跟你在那邊倒退走 …)。總結這家就是當練習，但應該不需要 Senior 太多的特質，如果去年來的話搭個作品就可以上班了的感覺。</p><h2 id="inline-樂排"><a href="#inline-樂排" class="headerlink" title="inline 樂排"></a><a href="https://inline.company/" target="_blank" rel="noopener">inline 樂排</a></h2><p>這家算是我排期待的一間公司，因為他有 升 降 桌 ，一個非常吸引人的特點啊！產品跟 FunNow 一樣主要定位在 app 上，兩者有點像上下游的關係，inline 主要幫餐飲業簡化定位及帶位流程，進一步減少客戶等待時間。第一次面試對方用 phone interview 所以沒有進到公司了解環境的機會，前端未來也會需要在網頁上跟 app 同步功能，讓中小型的店家不需要 ipad 也可以方便使用，面談後對方會給回家功課來評估是不是要進一步二面(但過了兩天我還沒收到題目😐)，就靜待後續吧。</p><h2 id="東南旅行社"><a href="#東南旅行社" class="headerlink" title="東南旅行社"></a><a href="https://www.settour.com.tw/" target="_blank" rel="noopener">東南旅行社</a></h2><p>目前為止這家最令我進退兩難，進的點是團隊很大，而且設計部門有程式底，自己會切版，不會天馬行空的想一堆跟作業時間成反比的東西 … 要就自己切！除了維護旅行社官網(React)以外，基本上有活動頁面都是可以自由發揮的(不限定 React)，也有保障年薪 13 個月、專案獎金、旅遊補助等等，福利面不錯，而且工程部使用 git flow 開發，聽起來是有很嚴謹的作業團隊；而退的點是，辦公室空間很小很矮 … 沒錯很矮，大概我手向上伸直就快把天花板打掉了，整個空間壓力很大，而且人多平面空間也壅擠，再來是有硬性服裝規定：襯衫、西裝褲、皮鞋，這樣導致上班的心情就很差，不想每天自己忍受這樣的環境，我應該大概是不會想來這裡吧。</p><p>目前一週內面試了四家，很巧妙的一天排兩個只用掉兩個下午的假✌️，但其實礙於現在的專案進度會審慎安排接下來的面試時間，如果風調雨順的話我的優先順序應該會是</p><p>inline &gt; FunNow &gt; else …</p><p>再來有關所謂 Senior 的資格，面試期間大家都是從專案作品上了解，實際有參與網站製作的經驗其實應該就符合大多數公司的門檻了，除了 FunNow 有談到關於 CS 的東西之外其他都還算順遂，也可能只是還沒遇到非常嚴格的面試考試，如果真的考應該會直接慢走不送吧，因為我自己覺得自學的缺點是對於程式基底的知識非常貧缺，像問什麼 stack 啊 queue 啊、prototype 會不會、MVC 架構、OOP 概念等等，我也許會用，也許有用過，但我真的不知道他的理論跟名字 … 面試完 FunNow 後我也對 golang 起了一點興趣，目前有時間就會研究一下用它來寫寫看後端 server，雖說前後 js 一家親是很好，可是現在 Nodejs 連爸爸都不要他了 😦</p><p>待續 …</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://az505806.vo.msecnd.net/cms/7df5abd1-eac0-49da-86a2-424f44ea95e7/a200a1f9-23c0-4c67-b74b-9bbc2ebd5b06-lg.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;擔任前端工程師一年多，吸收了日月精華後，為了回顧這一年的經驗值成長，我本來就預計要來個巡迴面試讓市場估一下現在自己的身價如何，來看看是不是當一個網路工程師就一定要有「本科出身」的天命才能勝任，於是最近就默默開始莫名的請假 … ⁉️&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>用 Vultr + Gandi 註冊網站（三）</title>
    <link href="http://yoursite.com/2018/08/11/setup-vps-dns-3/"/>
    <id>http://yoursite.com/2018/08/11/setup-vps-dns-3/</id>
    <published>2018-08-11T15:09:16.000Z</published>
    <updated>2018-08-13T12:18:02.648Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wUIr1QT.png" alt=""></p><a id="more"></a><p>買完 VPS 跟 DNS 就要來把兩個合併了，要讓我們的 Domain 直接連到你的頁面上，專案用 Vue 來舉 🌰 </p><p>首先先在我們的 server 上安裝 nginx</p><blockquote><p>nginx 可以把它視為幫你負責路由導向的人，以我的域名為例，當它收到 unick.tw 這個網址過來時要讓他打開首頁資料夾裡面的檔案呈現給 browser</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install nginx</span></span><br></pre></td></tr></table></figure><p>因為 nginx 讀檔有他特定的路徑放資料夾，雖然很臭長還是要記 … 有兩個地方分別是<br>/etc/nginx/sites-available : 主要放設定檔的地方<br>/etc/nginx/sites-enabled : 設定檔會被編譯放到這</p><p>所以我們要做的就是把設定檔寫好，執行一道神秘的指令讓 server 把它轉進 sites-enabled</p><p>到這我們先說明幾個指令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vim 修改文檔 filename --&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> nano [filename]</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 退出 --&gt;</span><br><span class="line">ctrl + X</span><br><span class="line"></span><br><span class="line">&lt;!-- 儲存 --&gt;</span><br><span class="line">ctrl + X &gt; ENTER</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 登錄路由檔案 filename --&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /etc/nginx/sites-available/[filename] /etc/nginx/sites-enabled</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 重開機 --&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service nginx restart</span></span><br></pre></td></tr></table></figure><p>在 /etc/nginx/sites-available 裡面可以看到他有一個預設的 default 可以參考設定，這時候如果你有裝 Filezilla 可以在自己電腦寫完後再拉 ftp ，又或者直接用 terminal 新增檔案並用 nano 編輯</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;              // 基本上應該不會動到這個</span><br><span class="line">  root /home/page;        // 視你的檔案位置而定</span><br><span class="line">  index index.html;       // 要開那個檔案</span><br><span class="line">  server_name unick.tw;   // 當來源的 Domain 等於這個就打開上述的檔案</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>儲存好後執行上面那行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /etc/nginx/sites-available/[filename] /etc/nginx/sites-enabled</span></span><br></pre></td></tr></table></figure></p><p>接著重啟 server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service nginx restart</span></span><br></pre></td></tr></table></figure><p>這樣你的 DNS 就可以正確地開啟網頁了 ！</p><hr><p>後記：</p><p>深入一點還有 sub domain 的設定，就是可以讓你一個 Domain 當多個用（當然主要 domain 都不會變）以及子資料夾的路由設定，像是<br>sub domain: sub.unick.tw<br>sub folder: unick.tw/anotherfile</p><p>這部分等我實作過後再來更新吧</p><p>總之有一個自己網站了，真爽！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wUIr1QT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Gandi" scheme="http://yoursite.com/tags/Gandi/"/>
    
      <category term="Vultr" scheme="http://yoursite.com/tags/Vultr/"/>
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>用 Vultr + Gandi 註冊網站（二）</title>
    <link href="http://yoursite.com/2018/08/11/setup-vps-dns-2/"/>
    <id>http://yoursite.com/2018/08/11/setup-vps-dns-2/</id>
    <published>2018-08-11T11:55:24.000Z</published>
    <updated>2018-08-11T15:15:26.062Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wUIr1QT.png" alt=""></p><a id="more"></a><p>第一步我們完成了 Vultr 的購買及設定，接著要開始採購自己專屬的 DNS 了。</p><h2 id="購買-DNS"><a href="#購買-DNS" class="headerlink" title="購買 DNS"></a>購買 DNS</h2><p>首先先到 <a href="https://www.gandi.net/zh-hant" target="_blank" rel="noopener">Gandi</a> 檢查一下自己享用的名字能不能註冊，就像角色 ID 如果先被取走了就不能重複使用，只能等他過期換域名才有機會拿到，所以如果早晚都打算買網域的話，不如早點先把域名註冊下來！<br><img src="https://i.imgur.com/6BM6ktz.png" alt=""></p><p>域名是採年費制，每次購買可以選擇要用幾年，期限到後可以續租，但要注意續租費用可能會有浮動！<br>順便推廣一下 Gandi 在 2018/8/1 ~ 2018/9/30 兩個月的期間有 .tw 特價 $50 的活動，我也跟風一波買了 .tw 當第一個域名，由於是特價活動就只能買一年的租約，後續看是要續租還是改其他域名了</p><p>購買流程不需要做什麼特別的設定，就跟平常網購一樣 🛒，買完後臺就可以看到熱騰騰的網域了！<br><img src="https://i.imgur.com/1Rg5S4Z.png" alt=""></p><h2 id="設定-DNS"><a href="#設定-DNS" class="headerlink" title="設定 DNS"></a>設定 DNS</h2><p>點進網域後總覽可以看到剛剛購買的一些明細資訊，包括租期等等，這邊我們直接進到「區域檔紀錄」<br><img src="https://i.imgur.com/I4GwaEw.png" alt=""></p><p>這個 table 就是我們最主要設定 Domain 導向的地方，試著新增一筆 DNS 把指向你的 IP<br><img src="https://i.imgur.com/LnHW4db.png" alt=""></p><p>在網址上輸入你的 DNS 如果成功指向 IP server 應該會看到 ‘Welcome to Nginx’ 的畫面，這樣就成功囉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wUIr1QT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Gandi" scheme="http://yoursite.com/tags/Gandi/"/>
    
      <category term="Vultr" scheme="http://yoursite.com/tags/Vultr/"/>
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>用 Vultr + Gandi 註冊網站（一）</title>
    <link href="http://yoursite.com/2018/08/10/setup-vps-dns-1/"/>
    <id>http://yoursite.com/2018/08/10/setup-vps-dns-1/</id>
    <published>2018-08-10T11:55:38.000Z</published>
    <updated>2018-08-11T11:54:31.478Z</updated>
    
    <content type="html"><![CDATA[<p>其實之前就有想要動手架設自己的網域了，但礙於麻煩跟 S3 首年免費的情況下，一直遲遲不肯動手，雖然 S3 網址醜歸醜還堪用，在下手之前也做了很久的功課，像是各家 VPS 的比較，哪邊的機<br>房比較好，DNS 代管服務誰比較優等等，終於就在今天一個下午有同事的 support 下完成了整個大工程 🙌，趕快趁熱熟記這一路艱辛的筆記。</p><p><img src="https://i.imgur.com/wUIr1QT.png" alt=""></p><a id="more"></a><h2 id="什麼是-VPS"><a href="#什麼是-VPS" class="headerlink" title="什麼是 VPS ?"></a>什麼是 VPS ?</h2><p>Virtual private server 簡稱，也就是「虛擬專用伺服器」，根據我的解讀，可以把它想像成你在雲端買了一台主機，然後這跟你在本機 run localhost server 一樣，要把他分享給別人的話只要把自己的 IP 換上去(e.g 128.0.0.0:3000) 就可以連到你的 server 瀏覽，而你買的這台 VPS 沒有區網的限制，他是一台一直開著的 server (也可以手動關閉)，每個人都可以透過他的 IP 連上，至於連上後會出現什麼畫面後面會說明怎麼設定。</p><h2 id="什麼是-DNS"><a href="#什麼是-DNS" class="headerlink" title="什麼是 DNS ?"></a>什麼是 DNS ?</h2><p>Domain Name System，我們俗稱的網域，如果說 IP 是我們在地圖上的經緯度，DNS 就是地標名稱；不知道 (121.564101,25.033493) 但是知道 台北 101 在哪裡，簡言之 DNS 就是把 IP 轉化為我們可以解讀的字串，省去背一大串數字的困擾。</p><h2 id="該怎麼選擇"><a href="#該怎麼選擇" class="headerlink" title="該怎麼選擇 ?"></a>該怎麼選擇 ?</h2><p>基本上選擇這塊我個人是比較看感覺的😅 首先 VPS，做功課表示目前線上 VPS 三巨頭分別是：</p><ul><li><a href="https://www.linode.com/" target="_blank" rel="noopener">Linode</a></li><li><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a></li><li><a href="https://www.digitalocean.com/" target="_blank" rel="noopener">DigitalOcean</a></li></ul><p>Linode 一直以來都是比較常聽到的老牌子，但我就是反骨不喜歡跟大多數人用的一樣，所以選擇 Vultr，另一方面也是有點因為 V 意志✌️<br><img src="https://i.imgur.com/cLoET5K.png" alt=""></p><p>而沒選擇 DO 的原因我記得好像是因為他在亞洲機房比較差，Linode 跟 Vultr 在東京的機房算是差不多，還有一點是看到同事用的 Linode 介面好羊村 … 沒有美感第一眼就不想用他😒，Vultr 在方案部分也比其他加多出了 $2.5 的選擇，很適合剛入手想嚐鮮的人購買，要注意的是現在 $2.5 取消了 IPv4 的支援，全面使用 IPv6，所以選擇前請先<a href="https://test-ipv6.com/index.html.zh_TW" target="_blank" rel="noopener">測試</a>你的網路支不支援 IPv6 喔！</p><blockquote><p>IPv6 與 IPv4 最大的差異在於他的 IP 組合，我們常看到的數字組 123.123.1.12 是 IPv4，IPv6 則是像 2001:DB8:2de:0:0:0:0:e13，雖然版本跟進是不可避免的，但目前礙於支援度的問題還是先評估自己的需求比較好</p></blockquote><p>值得一提的是，Vultr 不定期會推出註冊優惠，像我這波就是註冊即贈 $25 ，以 $5/month 來說等於送你五個月喔！</p><p>結論 <font style="font-weight: bold; color: #1364b4; font-size: 20px;"> Vultr </font> 勝出<br>當然 VPS 服務不只這三家，像是 Bandwagon、AWS、UpCloud、HostUs 等等的都可以比較看看</p><blockquote><font style="font-size: 10px; color: grey;">如果你也想用 Vultr 可以幫我點這個 👉<a href="https://www.vultr.com/?ref=7501517" target="_blank" rel="noopener">連結</a>👈 註冊</font></blockquote><p><br><br>DNS 也找了兩家代管做比較：</p><ul><li><a href="https://tw.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a></li><li><a href="https://www.gandi.net/zh-hant" target="_blank" rel="noopener">Gandi</a></li></ul><p>目前聽到大部分都是以 Linode 搭配 GoDaddy 做一個套餐組合，但反骨的我依舊是選擇我們的印度聖雄 Gandi，其一同樣也是因為它的介面比較對我的胃口(以及 V 的綠色✌️)，而當下果斷出手的原因則是正值為期兩個月的 .tw 破盤價 $50/year ! 所以腦波一弱就順手買了，整體算下來開銷就是這 $50 算是相當好的起步啊 😬</p><h2 id="購買-VPS"><a href="#購買-VPS" class="headerlink" title="購買 VPS"></a>購買 VPS</h2><p>Vultr 的購買步驟相當易懂，跟著流程走 server 就莫名其妙完成了呢！</p><blockquote><p>以下選項都可依個人喜好做調整</p></blockquote><p>機房可以選東京或新加坡，機房越近好像會比較快的樣子<br><img src="https://i.imgur.com/kxjAzx9.png" alt=""><br>因為同事都是用 Ubuntu 系統，這樣也比較好問<br><img src="https://i.imgur.com/wBtPydv.png" alt=""><br>像上面所提到的，目前 $2.5 只有 IPv6 版本，所以選擇 $5 方案就夠用了<br><img src="https://i.imgur.com/x08VTkr.png" alt=""><br>4 - 6 這邊我沒有做其他設定，如果事後想增加 IPv6 也可以從後台更改<br><img src="https://i.imgur.com/zYSmyTq.png" alt=""><br>最後就是設定主機名稱<br><img src="https://i.imgur.com/CZvSWfO.png" alt=""></p><p>整個設定完成後在你的主頁就會看到他正在啟動你的 Server<br><img src="https://i.imgur.com/fq6KmOQ.png" alt=""><br>點進來後需要注意的是紅色區塊的資訊，這些就是要登入遠端 server 的帳號密碼<br><img src="https://i.imgur.com/NxKOTJR.png" alt=""></p><p>再來打開 terminal 輸入下方指令後再輸入密碼<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh root@123.123.1.12</span></span><br></pre></td></tr></table></figure></p><p>其中 root 即上圖的 Username，Password 因為是亂數產生，用複製貼上會比較快(我不清楚密碼部份能不能手動更改)<br>到這邊我們就成功進入 server 了，接下來的步驟可以安裝 <a href="https://filezilla-project.org/" target="_blank" rel="noopener">Filezilla</a> 來操作會比較直覺</p><p>點選左上角的 站台管理員 並將設定如下(port 部分一律為 22)<br><img src="https://i.imgur.com/5A0Vbcu.png" alt=""><br>登入後看到就是 server 內的資料夾的結構，到這邊 VPS 就算建置成功了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實之前就有想要動手架設自己的網域了，但礙於麻煩跟 S3 首年免費的情況下，一直遲遲不肯動手，雖然 S3 網址醜歸醜還堪用，在下手之前也做了很久的功課，像是各家 VPS 的比較，哪邊的機&lt;br&gt;房比較好，DNS 代管服務誰比較優等等，終於就在今天一個下午有同事的 support 下完成了整個大工程 🙌，趕快趁熱熟記這一路艱辛的筆記。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wUIr1QT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Gandi" scheme="http://yoursite.com/tags/Gandi/"/>
    
      <category term="Vultr" scheme="http://yoursite.com/tags/Vultr/"/>
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>來了解一下前端測試</title>
    <link href="http://yoursite.com/2018/07/16/f2e-test/"/>
    <id>http://yoursite.com/2018/07/16/f2e-test/</id>
    <published>2018-07-16T07:04:07.000Z</published>
    <updated>2018-07-22T08:52:24.702Z</updated>
    
    <content type="html"><![CDATA[<p>被 Typescript 弄到 ㄎㄧ 肖後🤬，突然想學測試，因為俗話說</p><blockquote><p>測試做得好，完全不怕型別鬧；<br>型別一旦鬧，測試就是寫到老。</p></blockquote><p>根據我調查，前端分為兩種測試：</p><ol><li>end to end test</li><li>unit test</li></ol><p>既然要學就兩個都學一點吧！</p><a id="more"></a><h2 id="E2E-test"><a href="#E2E-test" class="headerlink" title="E2E test"></a>E2E test</h2><p>第一個 E2E(end to end) test 其實就是指畫面 UI 的測試，像是點擊後哪個 element 必須顯示/消失、call api 後的資料預期長度以及各種 element 的表現都可以經由 e2e 抓出來。</p><p>比較常見的應該是 Nightwatch.js ，還記得在建立 vue-cli(2.x) 時會有一條是<br><img src="https://i.imgur.com/Uj4qitQ.png" alt=""><br>但詳細比較後我選擇使用 <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> 而非 Nightwatch，因為 Nightwatch 需要的附件太多了 😐(Selenium 跟 Phantom 還是其他有的沒的 … )，而 Cypress 就是 Cypress 很容易上手！</p><p>這個時間點剛好可以用在最近六角活動的 (Filter demo)[<a href="https://github.com/uNickLin/vue-filter-demo]" target="_blank" rel="noopener">https://github.com/uNickLin/vue-filter-demo]</a> 上，要搞懂它的 api 確實是需要一點時間，但大致上有點類似 jQuery 的語意，加上一個口令一個動作的語法也增加可讀性，repo 裡面只稍微點幾個測試項目，Cypress 也有內建 example 的測試資料夾供參考喔！</p><h2 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h2><p>再來就是單元測試啦，鑑於近幾年的網頁模式風向逐漸轉向前端，因此面對一大坨的邏輯處理，單元測試應該會越來越被重視，會接觸單元測試的原因其實是因為有一次同事在寫 async await 時遇到 localstorage 存取速度不一的問題，導致發生錯誤還要碰運氣，只能靠不停的 F5 來偵錯 😓，當時才想說「要是我會寫測試就可以讓他自動 refresh 100 次來看到底會不會錯」，於是便踏進了 unit test 的領域，跟 e2e 一樣，vue-cli 也有內推的 unit test<br><img src="https://i.imgur.com/yda0eWA.png" alt=""></p><p>由於在這之前蠻常聽到 mocha 跟 jasmine ，就從他們先下手了解，但據我所知跟 Nightwatch 一樣太多東西要相輔相成了 … 於是矛頭轉向 Facebook 的 Jest(好像也可以測試 UI ?)，優點如下</p><ul><li>內置Jasmin語法</li><li>內置auto mock</li><li>自帶mock API</li><li>前端友好（集成JSDOM）</li><li>支持直接使用Promise和async/await書寫異步代碼</li><li>支持對 React 組件進行快照監控</li><li>擴展和集成 Babel 等常用工具集也很方便</li><li>自動環境隔離</li></ul><p>當然我自己也只試過 jest，所以大部分我都不懂是啥意思 😅，選擇的原因只是單純因為</p><ol><li>使用面向多元</li><li>有 FB 背書</li></ol><p>去年在 ALPHA Camp 學 ROR 時也有學到一點測試，unit test 就跟當時寫的東西很雷同，現在有點邏輯基礎了也比較了解單元測試的用意及語法，但實際使用上其實也是點點水，還沒摸到很深入的功能，同樣的 api 也是要花點功夫，尤其一次學 e2e test 跟 unit test ，彼此的 api 都記得很亂 … ，大型一點的專案或是長期開發的產品還有機會用到 CI ，CI 也是測試學完後的目標，之後看有沒有機會在自己的 side project 上實戰囉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;被 Typescript 弄到 ㄎㄧ 肖後🤬，突然想學測試，因為俗話說&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;測試做得好，完全不怕型別鬧；&lt;br&gt;型別一旦鬧，測試就是寫到老。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根據我調查，前端分為兩種測試：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;end to end test&lt;/li&gt;
&lt;li&gt;unit test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然要學就兩個都學一點吧！&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="cypress" scheme="http://yoursite.com/tags/cypress/"/>
    
      <category term="jest" scheme="http://yoursite.com/tags/jest/"/>
    
  </entry>
  
  <entry>
    <title>一歲「工程師」的歷程</title>
    <link href="http://yoursite.com/2018/07/02/f2e-anniversary/"/>
    <id>http://yoursite.com/2018/07/02/f2e-anniversary/</id>
    <published>2018-07-02T12:16:54.000Z</published>
    <updated>2018-07-08T05:32:24.317Z</updated>
    
    <content type="html"><![CDATA[<p>昨天(7/1)是我正式掛上「前端工程師」職銜的一週年，在 AC 期間就有被培養寫部落格的習慣，只是沒想到現在竟然還在寫(!?)，趁還在用 hexo 的時候來回顧自己在這一年的成長跟心得 ✍️</p><a id="more"></a><p>差不多在兩年前正好因為感到職涯渺渺而開始投入在未來好像會很有用的程式碼領域，當然另一方面也是覺得工業自動化只是遲早的問題，早點學一技之長才不會被工作綁著。於是就四處摸索包含 python, java, c 等以前大學討厭的東西都啃起來了(而且我還買了 python 的書現在應該發霉了 🤗)，偶然之下看到了 Hahow 的 <a href="https://hahow.in/courses/56189df9df7b3d0b005c6639/main" target="_blank" rel="noopener">動畫互動網頁程式入門 (HTML/CSS/JS)</a>，實不相瞞第一眼的感覺就是「哇這一次學三種語言感覺很吃力但應該會很厲害」，但我還是有先研究一下這東西叫前端之後才下手。<br><img src="https://www.techworm.net/wp-content/uploads/2017/10/CoM-The-Ultimate-Front-End-Development-Bundle-780x390.jpg" alt=""></p><p>「動畫互動」確實是我踏入網頁，也是前端他吸引我的初衷，抱著這一點微薄的知識在二月時踫上了 ALPHA Camp 第十三屆的甄試，光看到「全端工程師」就一個腦衝二月底辭職三月入學了，回想起來真的很衝動😅，因為它實在價格不斐，另外也要自備 Macbook … 大概是一個一口氣把積蓄跟人生都砍掉重練的概念 … 但沒有當初的熱血青年也不會有現在熱衷於宅 code 的我。當時只是想說既然網頁分前後端，要走前端應該有點後端知識會很加分吧，然而因為衝動加入，沒有聽事前說明會：後端大概佔了87% 😐 ，只能在課題之餘還是拿來練 CSS 讓畫面至少美觀一點，不然純後端真的很像小學用的 frontpage … 但在珍貴的 13% 中學到了更多的 CSS 運用、認識 Javascript 以及框架的基礎認識，而之前買的 動畫互動網頁程式入門 也剛好有帶到一點 Vue 開發，所以順勢的選擇的綠色陣營 🤘<br><img src="http://us.vuejs.org/_nuxt/img/vuesplash.3e416f3.png" alt=""></p><p>十週奮鬥結業後，又回到了初出社會的面試地獄 🤮，尤其這次是一個全新的領域，不像以前製造業一樣「學歷 ＝ 薪資」就算什麼都不會只要拿著一張畢業證書進去再學就好。要好好擬訂一番策略，就先挑了幾家要求不多的公司練習一下面試準備、大概會考什麼題目，面試資料當時記錄在 <a href="http://unicklin-blog.logdown.com/posts/1961314-halfway-decent-front-end-engineers-interview" target="_blank" rel="noopener">LOGDOWN</a>，最後在這了，不管怎樣先求工作資歷，一邊充電提升自己的價值，才能賺到更多 👉💵👈。一年了，我也想出去繞繞衡量一下自己身為工程師的市值如何，有哪些基本能力還不足的，說真的現在翻開求職網竟然也能學到很多沒看過的新東西！真正體會到「前端」是一個學無弗界的頭銜，一旦駐足就追不上時代 😦</p><p>言而總之，雖然是以「動畫互動」立志踏入前端的前端設計師，現在卻是一個離不開 Vue 框架的前端工程師，因為互動這方面我在職場上的體會 嗯… 不是很好，只能說視覺這種東西是很主觀的概念，每個人要的感覺不一樣，彼此感覺差太多的話做起來真的很痛苦(bittersweet?)，現在才會投身在框架中，但也因為這個經歷讓我知道框架處理資料的實用性，從使用者操作流程到第三方 API 介接，都是很受用的技能，「動畫互動」也許不在我的主要幹道上，卻依然可以在自己的 sideproject 重拾一下自己做小動畫的樂趣。</p><p>Cheers ! 為了網頁與薪水而奮鬥 🙌</p><p><img src="http://blog.debugme.eu/wp-content/uploads/2016/01/great-frontend.png" alt=""></p><font style="font-size: 8px">P.S.<br>修煉前端第三週純切版因為平時切到麻木了就先 skip<br>修煉前端第四週出去玩也是一個 skip 😅</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天(7/1)是我正式掛上「前端工程師」職銜的一週年，在 AC 期間就有被培養寫部落格的習慣，只是沒想到現在竟然還在寫(!?)，趁還在用 hexo 的時候來回顧自己在這一年的成長跟心得 ✍️&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>修煉前端 Week 3 - Dashboard</title>
    <link href="http://yoursite.com/2018/06/20/sideproject-dashboard/"/>
    <id>http://yoursite.com/2018/06/20/sideproject-dashboard/</id>
    <published>2018-06-20T07:52:30.000Z</published>
    <updated>2018-06-30T10:39:30.348Z</updated>
    
    <content type="html"><![CDATA[<p>這次第三週的題目是後台的 dashboard 介面，一直以來看到的 demo 都是一大堆的圖表數字看起來很厲害，但自己真正做起來其實很費勁 … 尤其是圖表的部分，每一家的 api 都不盡相同，更別說會有什麼奇葩客戶要一些常人不會有的功能，所以這次只做個簡單的 overview 頁面，順便玩玩幾個有趣的 plugin</p><a id="more"></a><p><img src="https://i.imgur.com/2s23645.png" alt=""></p><font style="font-size: 30px; color: red">假的</font><p>… 這只是理想，實際上只有<a href="http://vdashboard.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">這樣</a> 😅<br><img src="https://i.imgur.com/Kq4zlLG.png" alt=""></p><p>其實頁面應該還包含商品列表、上下架的功能，但因為</p><ol><li>列表部分只是 v-for 操作</li><li>沒有實際 api 做起來很沒 fu</li><li>同時間有更迫切的事要學：Typescript 🤬</li><li><font style="text-decoration: line-through; font-size: 8px; color: grey">我懶的做</font></li></ol><p>可是它的質量還是很高的 🤗</p><p>趁這機會可以用自己收藏一堆的套件，像是<a href="http://github.hubspot.com/odometer/docs/welcome/" target="_blank" rel="noopener">Odometer</a>就跑得很喜洋洋，只可惜因為上方三個數據是隨機產生的，負數的部分沒辦法在一開始就顯示出來</p><p>圖表部分可就有點淵源了，說起從去年踏入公司那段期間有在自習研究 <a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a>，費了三焦耳之力，好不容易生出個 bar chart 和 donut chart，而且還是最陽春最不彈性的那種，才發現 RWD 又要在鑽進去那一堆 math hell 改 😱<br>… 然後就沒有然後了，卯起來找個一大堆圖表套件備用，既然前人都寫妥了，就別再費勁了吧 🍵 而且市場上的圖表款式比想像的還多，暫時應該是不會有需要自己跳下去的情況</p><p>拉回正題，這次使用的是 <a href="https://www.amcharts.com/v4/" target="_blank" rel="noopener">amcharts</a>，原因是他的趨勢圖可以用滑鼠拉伸區間顯示有吸引到我，之後有機會再嘗試他們家的其他圖表！</p><p>接著下方左邊是用 random math 跑出來的就不贅述，主要是右方社團同好提供的 <a href="https://github.com/marak/Faker.js/" target="_blank" rel="noopener">Faker.js</a>，有喚起在 Rails 用的 faker 美好回憶，但相較於後端直接建立在 schema 裡面的方便性還是有點落差，之後也有找到一款幫你製作假 json 的 <a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a>，專案上應該可以方便許多！</p><p>總結這週題目因為種種因素沒有投入太多心力，花了大部分的時間在了解 Typescript 的規則，更別說還要讓他在 Vue 裡面暢行無阻 🤯 但想想自己確實也該重拾一下 OO 的概念，離開 ROR 之後在 JS 過的太無拘無束了，筆記做完再找個時間統整一下</p><hr><p>P.S. 我的圖表庫</p><ul><li><a href="https://plotdb.com/" target="_blank" rel="noopener">plotdb</a>: 感覺是集合圖表作品的庫，是說他上面的 beta 已經掛蠻久了 … 應該是已棄置，但如果需要還是可以取用，他提供線上操作</li><li><a href="http://www.chartjs.org/" target="_blank" rel="noopener">Chart.js</a>: 用戶應該蠻廣的，介面簡單清晰，平常沒事都用這款</li><li><a href="https://www.anychart.com/" target="_blank" rel="noopener">AnyChart</a>: 整體既視感跟 Chartjs 很像，但免費仔<font style="text-decoration: line-through; font-size: 8px; color: grey">我</font>會有 brand logo 印在上面，好孩子千萬不要用 css 去把人家消掉啊！</li><li><a href="https://www.amcharts.com/v4/" target="_blank" rel="noopener">amcharts</a>: 本週主角光環，已經升級到第四版了！</li><li><a href="https://eventbrite.github.io/britecharts/index.html" target="_blank" rel="noopener">Britecharts</a>: 有一個專案使用到它的 donut chart 感覺還不錯，是用 d3 最新版(v5)繪製的</li><li><a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">ECharts</a>: 看過史上最強大的圖庫沒有之一，而且有中文介面、開源、支援層面廣！</li></ul><p>下面幾個就比較沒深入了，反正看到先存一波(有些好像要付費)</p><ul><li><a href="https://www.highcharts.com/" target="_blank" rel="noopener">hightcharts</a></li><li><a href="https://canvasjs.com/" target="_blank" rel="noopener">canvasJS</a></li><li><a href="http://visjs.org/#" target="_blank" rel="noopener">visjs</a></li><li><a href="https://antv.alipay.com/zh-cn/g2/3.x/index.html" target="_blank" rel="noopener">AntV</a></li><li><a href="http://lbs.amap.com/" target="_blank" rel="noopener">高德開放平台</a>(阿里爸爸的)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次第三週的題目是後台的 dashboard 介面，一直以來看到的 demo 都是一大堆的圖表數字看起來很厲害，但自己真正做起來其實很費勁 … 尤其是圖表的部分，每一家的 api 都不盡相同，更別說會有什麼奇葩客戶要一些常人不會有的功能，所以這次只做個簡單的 overview 頁面，順便玩玩幾個有趣的 plugin&lt;/p&gt;
    
    </summary>
    
      <category term="Side-projects" scheme="http://yoursite.com/categories/Side-projects/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>修煉前端 Week 2 - Filter 之 Youbike</title>
    <link href="http://yoursite.com/2018/06/14/sideproject-filter/"/>
    <id>http://yoursite.com/2018/06/14/sideproject-filter/</id>
    <published>2018-06-14T06:33:47.000Z</published>
    <updated>2018-06-21T13:46:26.428Z</updated>
    
    <content type="html"><![CDATA[<p>很快的前端試煉來到了第二週：filter，試著做出有篩選功能的網頁，但第一週其實還有很多想繼續鑽研的地方，像是還沒解決的 PWA 離線緩存、手機上的 tap 選取問題等等，不過整體而言一整個禮拜都很充實呢！有個目標可以達成，沒有設計在旁邊嘰嘰喳喳，完全就是打造一個自己想要的作品<small>（晚上都捨不得打電動了）</small></p><a id="more"></a><p>第二週社團給的 ref 大概就是一個旅遊介紹的介面，左邊篩選欄位，最上方有全站搜尋的 input，再來就是主畫面的清單呈現跟內頁更詳細內容<small>(因為題目方向是「篩選」所以這次就不貼了因為完全不一樣)</small></p><p>說到開放 api 第一個就是想到台北市政府<small style="text-decoration: line-through; color: grey">(結構很爛)</small>的<a href="http://data.taipei/" target="_blank" rel="noopener">開放平台</a>，找來找去沒有一個爭氣的能用，就當要往國外網站找時，突然閃了一下 youbike 這東西，雖然說到底我自己應該也不會想用這個功能，但 … 練習嘛，功能總是有人會需要的 🤨</p><p>就大概花了個時間，洗了個澡，換了套衣服，生出一個陽春的 wireframe<br><img src="https://i.imgur.com/KykJtVH.jpg" alt=""></p><p>然後呢再跟 CSS 交戰數百回後，介面總算是好了<br><small style="text-decoration: line-through; color: grey">切版比寫功能更要命🙄</small><br><img src="https://i.imgur.com/rW12YJ6.png" alt=""></p><div class="mobile_images"><br>    <img src="https://i.imgur.com/5lqA4LA.png"><br>    <img src="https://i.imgur.com/vAdjO1D.png"><br></div><p>接下來就進入正題了，下面來分享這一路的波折，一開始遇到最頭痛的問題是 …<br><strong style="font-size: 25px; color: red">API !!!</strong><br><strong style="font-size: 30px; color: red">API !!!</strong><br><strong style="font-size: 35px; color: red">API !!!</strong></p><p>他的 url 竟然是 <a href="https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.gz" target="_blank" rel="noopener">https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.gz</a> 一個壓縮檔，讓我一開始一直以為是下載來自己用，但想想也不對，我們的偉哉政府有辦法幫我下載的檔案做更新？！二話不說我直接丟進 postman 一探揪竟，果然是要連這個網址而且還不能用瀏覽器看 …</p><p>接著看到他的結構是這樣<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">   "retCode": 1,</span><br><span class="line">   "retVal": &#123;</span><br><span class="line">     "0001": &#123;</span><br><span class="line">       "sno": "0001",</span><br><span class="line">       "sna": "捷運市政府站(3號出口)",</span><br><span class="line">       ...</span><br><span class="line">     &#125;,</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OK 這物件包物件的結構跟火基<small style="text-decoration: line-through; color: grey">(firebase)</small>有 87% 像，雖然這對 v-for 來說不成問題，他還是可以正常做迴圈循環，<strong style="color: red">B U T ！</strong> 我完全不能對資料做常用的陣列處理 … 所以這邊 GET 後要馬上先做一層轉換陣列的處理才能安心上路<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.gz'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> oriData = res.data.retVal</span><br><span class="line">  <span class="keyword">let</span> dataArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> oriData) &#123;</span><br><span class="line">    dataArr.push(oriData[key])</span><br><span class="line">  &#125;</span><br><span class="line">  commit(<span class="string">'storeApiData'</span>, dataArr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>而在第一次接觸 Vuex 後我就再也離不開它了，很多資料狀態現在都喜歡存在 state 裡面避免一堆上下傳承的 emit hell，因為 Vuex 用到現在還沒遇到太大的專案，所以對於拆分 module 可能還沒有什麼概念，不知道目前這個做法會不會有問題就是了。</p><p>這邊遇到了一個 getter 的小障礙，我的記法是把它當成 component 中的 computed 來操作，可是一旦遇到像 input 這種需要 v-model 的情況就不能綁在 getter 上了，因為一般的 computed value 是唯讀屬性，如果要做寫入修改的話就要分別做 <strong style="color: blue">setter</strong> &amp; <strong style="color: blue">getter</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  updateKeyword: &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.searchKeyword</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newInput) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'updateKeyword'</span>, newInput)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>剛好這次有機會碰到 input 篩選的功能，想來嘗試看看之前在<a href="https://ithelp.ithome.com.tw/articles/10192175" target="_blank" rel="noopener">鐵人賽</a>看到一位前輩分享的 listener: <strong><mark>composition</mark></strong><br><img src="http://www.7713.com/static/attachment/upload/image/20180525/1527240845749005.jpg" alt=""></p><p>簡單來說，回想一下我們在用 google search 的時候，只要是中文輸入法他都會在拼字期間就告訴你相關查詢的單字，這就是 composition 的功能，主要切分為三個觸發點</p><ol><li>compositionstart: 開始輸入時</li><li>compositionupdate: 拼字或選字期間</li><li>compositionend: 選字完成</li></ol><p>試了一下 vue 看他有沒有綁這個 listener 的 function 還真的成功了！👐<br>所以就把三個 listener 全部都拿去做比對篩選<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input(</span><br><span class="line">  type=&apos;text&apos;, </span><br><span class="line">  v-model=&apos;updateKeyword&apos;,</span><br><span class="line">  ref=&apos;searchInput&apos;,</span><br><span class="line">  @compositionstart=&apos;composition($event)&apos;,</span><br><span class="line">  @compositionupdate=&apos;composition($event)&apos;,</span><br><span class="line">  @compositionend=&apos;composition($event)&apos;)</span><br></pre></td></tr></table></figure></p><blockquote><p>composition 的回傳值會在 $event.data</p></blockquote><p>至於最主要的篩選功能，拜<a href="http://titlist.com.tw/" target="_blank" rel="noopener">泰德利</a>的福，雖然不到爐火清純<small>(?!)</small>，但對於整個做法還是有概念的，只要稍微整理出篩選順序就可以做到多層級篩選的目的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">filteredData: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> finalData = []</span><br><span class="line">  <span class="comment">// search keyword filter</span></span><br><span class="line">  finalData = state.searchKeyword === <span class="string">''</span> ? state.bikeData : state.bikeData.filter(<span class="function"><span class="params">bike</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tempStr = <span class="built_in">JSON</span>.stringify(bike)</span><br><span class="line">    <span class="keyword">let</span> regexWords = state.searchKeyword.split(<span class="string">' '</span>).join(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">if</span> (tempStr.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(regexWords, <span class="string">'i'</span>)) !== <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compute content of each area</span></span><br><span class="line">  state.areaList.forEach(<span class="function"><span class="params">area</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    finalData.forEach(<span class="function"><span class="params">bike</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (bike.sarea === area.name_zh) count++</span><br><span class="line">    &#125;)</span><br><span class="line">    area.contentLength = count</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// area filters</span></span><br><span class="line">  finalData = store.getters.selectedTags.length === <span class="number">0</span> ? finalData : finalData.filter(<span class="function"><span class="params">bike</span> =&gt;</span>  store.getters.selectedTags.some(<span class="function"><span class="params">tag</span> =&gt;</span> tag.name_zh === bike.sarea))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status filters</span></span><br><span class="line">  <span class="comment">// // rentable</span></span><br><span class="line">  finalData = state.rentable ? finalData.filter(<span class="function"><span class="params">bike</span> =&gt;</span> bike.sbi &gt; <span class="number">0</span>) : finalData</span><br><span class="line">  <span class="comment">// // returnable</span></span><br><span class="line">  finalData = state.returnable ? finalData.filter(<span class="function"><span class="params">bike</span> =&gt;</span> bike.bemp &gt; <span class="number">0</span>) : finalData</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pagination options</span></span><br><span class="line">  state.totalPage = <span class="built_in">Math</span>.ceil(finalData.length / state.pageSize)</span><br><span class="line">  state.totalLength = finalData.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pagination</span></span><br><span class="line">  <span class="keyword">let</span> start = (state.currentPage - <span class="number">1</span>) * state.pageSize</span><br><span class="line">  <span class="keyword">let</span> end = start + state.pageSize</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> finalData.slice(start, end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://farm4.static.flickr.com/3027/3085098011_a712cbb21f_m.jpg" alt=""></p><p><big><strong>第一層</strong></big>篩選我先處理最上方 input 的 keyword，用 regex 比對字元再回傳比對後的結果，但其實這邊篩選做得不好，因為這個做法是把物件的「所有」資料轉換成字串後去比對，也就是包含 key 值跟有些不會在畫面上呈現的 value，在 join(‘|’) 那部分本來是想做到像 search engine 一樣可以用空格來做複數的交叉比對，可是現在還沒找到 regex 寫交集的方法所以先留著聯集 …</p><p><big><strong>第二層</strong></big>的 finalData 就會是第一層的篩選結果，就算沒篩選也是返回原陣列<small style="color: grey">(每層皆是)</small>，所以可以接著做自己的篩選條件，這邊是負責計算每個行政區經過第一層的篩選後各有幾筆，會放在第二個的原因是因為如果在第三層或以下才開始篩的話只會顯示被點選的那個行政區數量，其他都是 0</p><p><big><strong>第三層</strong></big>則是行政區下方的狀態篩選，主要是做 可借車數 &gt; 0 跟 可歸還數 &gt; 0</p><p><big><strong>第四層</strong></big>就是最後的分頁切割啦，頁碼的計算一定一定是放在最後，才能正確地算出全部結果的筆數該分成幾頁，這邊本來是想試看看用<a href="https://github.com/ElemeFE/vue-infinite-scroll" target="_blank" rel="noopener">infinite-scroll</a>的方式來呈現<small style="text-decoration: line-through; color: grey">(絕不是因為算頁數很麻煩又很沒成就感)</small>，但最後還是作罷 … 先用以前的 component 頂著，再不然其實也可以找線上寫好的 component 來用</p><p>寫到這花了整整兩天的時間😓 超級累但成就滿點r！離截稿還有一段時間，就拿來套看看 google map 好了！原本想說這邊會耗上一段光陰，實際上比預期的還快，主要是拜<a href="https://medium.com/founders-factory/building-a-custom-google-map-component-with-vue-js-d1c01ddd0b0a" target="_blank" rel="noopener">前人</a>種的長青樹跟<a href="https://developers.google.com/maps/documentation/javascript/get-api-key" target="_blank" rel="noopener">官方文件</a>的福才能順利完成。</p><p><a href="http://vfilter.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">看看成品</a></p><p><img src="https://i.imgur.com/Q98HR4t.png" alt=""></p><p>之後在找時間整理一下 Vuex 的細節🙌</p><style>    .mobile_images{        width: 100%;        height: 650px;        display: flex;    }    .mobile_images img{        width: 50%;        height: auto;    }    @media (max-width: 768px){        .mobile_images{            flex-direction: column;            height: auto;        }        .mobile_images img{            width: 100%;        }    }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很快的前端試煉來到了第二週：filter，試著做出有篩選功能的網頁，但第一週其實還有很多想繼續鑽研的地方，像是還沒解決的 PWA 離線緩存、手機上的 tap 選取問題等等，不過整體而言一整個禮拜都很充實呢！有個目標可以達成，沒有設計在旁邊嘰嘰喳喳，完全就是打造一個自己想要的作品&lt;small&gt;（晚上都捨不得打電動了）&lt;/small&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Side-projects" scheme="http://yoursite.com/categories/Side-projects/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>VS Code terminal 版本錯誤</title>
    <link href="http://yoursite.com/2018/06/07/vscode-node-version/"/>
    <id>http://yoursite.com/2018/06/07/vscode-node-version/</id>
    <published>2018-06-07T10:00:03.000Z</published>
    <updated>2018-06-07T10:17:12.861Z</updated>
    
    <content type="html"><![CDATA[<p>公司電腦一直有一個問題困擾我，就是 VS Code 裡面的 node 版本，當初安裝時是使用 v6.11.0，但現在在自己電腦上都已經更新到 v8.9.4 了，雖然可以透過 nvm use 8 來改變，但每次建立專案要是沒有切換到就要多等一個錯誤時間，之前也嘗試過設定預設版本未果。</p><a id="more"></a><p>根據 google 結果，要設定預設版本只要輸入指令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm <span class="built_in">alias</span> default 8</span></span><br></pre></td></tr></table></figure></p><p>這時候電腦就會自動使用 8.9.4 了，這個方法在 OS terminal 上沒問題，就是進了 VS Code 都會跳回 6.11.0 🤬<br>就在剛才發現每次開 VS Code 都會有一條被我忽略的訊息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm is not compatible with the npm config "prefix" option: currently set to "/usr/local"</span><br><span class="line">Run `npm config delete prefix` or `nvm use --delete-prefix v8.9.0 --silent` to unset it.</span><br></pre></td></tr></table></figure><p>可想而知，這麼明確的訊息我兩個都 run 過了就是沒反應，最後輾轉了好幾個 stackoverflow 才找到<a href="https://github.com/creationix/nvm/issues/1652" target="_blank" rel="noopener">神解</a><br><small color="grey">(還找了一下怎麼開 ./bash_profile)</small></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.bash_profile; open ~/.bash_profile</span></span><br></pre></td></tr></table></figure><p>這時候會開啟文字編輯器，只要在最上面加入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH="/usr/local/bin:$(getconf PATH)"</span><br></pre></td></tr></table></figure></p><p>存擋，完成，收工 🤘</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司電腦一直有一個問題困擾我，就是 VS Code 裡面的 node 版本，當初安裝時是使用 v6.11.0，但現在在自己電腦上都已經更新到 v8.9.4 了，雖然可以透過 nvm use 8 來改變，但每次建立專案要是沒有切換到就要多等一個錯誤時間，之前也嘗試過設定預設版本未果。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="VS Code" scheme="http://yoursite.com/tags/VS-Code/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>修煉前端 Week 1 - Todo List</title>
    <link href="http://yoursite.com/2018/06/07/sideproject-todolist/"/>
    <id>http://yoursite.com/2018/06/07/sideproject-todolist/</id>
    <published>2018-06-07T01:54:00.000Z</published>
    <updated>2018-06-07T09:06:58.357Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在 Facebook 上被廣吿推薦了一個「精神時光屋」的社團，原來裡面是六角學院的練功場，就毫不遲疑地加入，也很快迎來第一個活動：連續九週前端挑戰，第一週就是那個世人稱為最初的起點也是最後的終點的 Todo List (即興的霸氣 slogan)</p><a id="more"></a><p>Todo List 真要說起來也可以做得很大，還記得剛接觸框架時很多教學就是帶你手把手的建立一個 Todo List</p><iframe height="418" scrolling="no" title="[Vue] Todolist" src="//codepen.io/uNickHow/embed/MmzKQr/?height=418&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/uNickHow/pen/MmzKQr/" target="_blank" rel="noopener">[Vue] Todolist</a> by uNickHow (<a href="https://codepen.io/uNickHow" target="_blank" rel="noopener">@uNickHow</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>以及面試某家公司時被要求的 <a href="https://unicklin.github.io/Todolist_angular/" target="_blank" rel="noopener">Angular Todo List</a></p><p><img src="https://i.imgur.com/JO9QmMH.png" alt=""></p><p>這些入門款的待辦事項不需要太多功能，只要可以 C R <small style="text-decoration: line-through; color: grey">U(沒有你)</small> D 就好，但要做大還可以像 app 一樣有日期、提醒、上傳照片、分類等等，所以這次參加這項活動我就拿來實驗 Vue PWA</p><p>社團有提供基本的 user story 跟 <a href="https://hexschool.github.io/THE_F2E_Design/todolist/" target="_blank" rel="noopener">Wireframe</a>，接著就自行發揮囉！</p><p><img src="https://i.imgur.com/bTBQKcG.png" alt=""></p><p>稍做一點微調後，呈現的 UI 變成<a href="http://vtodo.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">這樣</a><br><img src="https://i.imgur.com/qWRUNxv.png" alt=""></p><p>因為我使用的是 Localstorage 暫存，所以偏向文字紀錄而不套用檔案上傳的功能<small style="text-decoration: line-through; color: grey">(也是可以做圖片上傳存成 base64 啦只是我懶 …)</small></p><p>也順手練習一下之前 Max 教的 transition，主要用在新增跟列表的 component 轉場，整體質感上升！<br>因為這次是以 PWA 為出發點，所以手機排版的部分就依照我自己覺得使用順手的仿 app Layout</p><p><img src="https://i.imgur.com/veh6sHn.png" alt=""></p><p>還很貼心的告訴使用者可以用 Safari 加到桌面喔！<br>雖然他是壞的但還是很大心</p><hr><p>這次的作品還有很大一部份的重心是自己真正實作 Vuex，之前都是看影片教學哦哦哦地點頭，好像很懂但其實不然，套用 Vuex 後終於告別 components 間的 emit hell 😭，不然那一坨一坨的 emit 每次看每次懷疑人生 …</p><p>接下來就像 Todo 所寫的，要解決 Muuri.js 的套用，如果不行還是繼續使用 vue-draggable，然後<strong>解決 PWA 暫存問題！</strong>，順利的話說不定還可以離線使用，最後再來處理圖片上傳<small style="text-decoration: line-through; color: grey">(如果有空, if, might, perhaps)</small></p><hr><p>2018/06/06 16:58</p><p>後記很快就來了，經過一整天跟 PWA 在手機不能開的問題勾勾纏後，突然想到既然他是從 Safari 去加到桌面，應該還是靠 Safari 來瀏覽的吧? 於是接上 lightning 馬上開 devtool 來瞧一瞧，才發現他怎麼會完全沒錯誤(!?)而且只有上頭的 Navbar 正常顯示，其他 router 怎麼沒有 render 進來，奇怪這好像在哪裡看過 !! 真的是絞盡腦漿後柳暗花明，才想起以前曾經直接去打開 npm run build 後的 index.html，想說他應該會自己 run app.js 才對(並不會)，就是跟這個情況一模模一樣樣，回頭去看他為什麼會打開 index.html</p><p><img src="https://i.imgur.com/neKi2L1.png" alt=""></p><p>嗯，又一個搞到自己的低級錯誤，改成 “/“ 就沒事了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子在 Facebook 上被廣吿推薦了一個「精神時光屋」的社團，原來裡面是六角學院的練功場，就毫不遲疑地加入，也很快迎來第一個活動：連續九週前端挑戰，第一週就是那個世人稱為最初的起點也是最後的終點的 Todo List (即興的霸氣 slogan)&lt;/p&gt;
    
    </summary>
    
      <category term="Side-projects" scheme="http://yoursite.com/categories/Side-projects/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="PWA" scheme="http://yoursite.com/tags/PWA/"/>
    
      <category term="Localstorage" scheme="http://yoursite.com/tags/Localstorage/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Vue Router 中使用 Vuex</title>
    <link href="http://yoursite.com/2018/05/29/vuex-in-vue-router/"/>
    <id>http://yoursite.com/2018/05/29/vuex-in-vue-router/</id>
    <published>2018-05-29T06:09:30.000Z</published>
    <updated>2018-05-29T07:10:39.847Z</updated>
    
    <content type="html"><![CDATA[<p>最近在練習的時候有遇到一個功能需求是：在 router 切換時都要關閉側邊欄 menu 的狀態(也就是隱藏)，因為 router view 本身只會做 component 抽換的動作，所以在 router view 之外的狀態都不會被更新。</p><a id="more"></a><p>這個動作在點擊切換時沒有問題，我們可以在 menu 的 ul 加上 @click function 來關閉側邊欄。但如果使用者操作「上一頁」「下一頁」時就會出現問題。</p><p><img src="https://i.imgur.com/7clnDHB.gif" alt=""></p><p>因為這次將這種全站式的功能寫進 Vuex 來操作，這樣如果其他 component 也需要用到 menu 開關的功能就會方便很多(不需要 props 來 emit 去了 …)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store (&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isMenuOpen: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    toggleMenu(state, boolean) &#123;</span><br><span class="line">      <span class="keyword">if</span> (boolean === <span class="literal">true</span> || boolean === <span class="literal">false</span>) state.isMenuOpen = boolean</span><br><span class="line">      <span class="keyword">else</span> state.isMenuOpen = !state.isMenuOpen</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根據這種需求看來，就可以使用到 router guard 中的 beforeEach 操作 Vuex 中的狀態，我們只消在 router 的檔案中引入存放 Vuex store 的檔案(e.g store.js)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'../store.js'</span></span><br></pre></td></tr></table></figure></p><p>由於我們使用的 hook 是 beforeEach ，這時候 Vue 還沒掛載，如果使用 Vue.store.commit 等等的做法會導致抓不到物件(undefined)，因此這邊直接以 store 操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'../store.js'</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">'toggleMenu'</span>, <span class="literal">false</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>完成！<br><img src="https://i.imgur.com/TReVGiL.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在練習的時候有遇到一個功能需求是：在 router 切換時都要關閉側邊欄 menu 的狀態(也就是隱藏)，因為 router view 本身只會做 component 抽換的動作，所以在 router view 之外的狀態都不會被更新。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>Vue 的小細節</title>
    <link href="http://yoursite.com/2018/05/28/vue-doc/"/>
    <id>http://yoursite.com/2018/05/28/vue-doc/</id>
    <published>2018-05-28T02:36:31.000Z</published>
    <updated>2018-05-28T03:53:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 Udemy Max 的課看到一個進度後，發現其實自己在使用 Vue 的時候還有很多可以優化的地方，所以撥個時間把<a href="https://vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">官方文件</a>看個仔細，紀錄一下在課程及文件中學到的新知識。</p><a id="more"></a><h2 id="Router-路由名稱"><a href="#Router-路由名稱" class="headerlink" title="Router 路由名稱"></a>Router 路由名稱</h2><p>以前只會用一種 router-link 方式來切換：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;path: "/"&#125;'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其實沒有其他參數的情況下就跟一般路由一樣設定即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>這邊重要的是，path 除了 url 之外，也可以用 name 來定義，好處是未來若 url 層級變更，component 中的 router-link 不需要變動！</p><p>首先必須為每個路由命名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'Home'</span>,</span><br><span class="line">path: <span class="string">'/'</span>,</span><br><span class="line">component: Home</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'About'</span>,</span><br><span class="line">path: <span class="string">'/about'</span>,</span><br><span class="line">component: About</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name: "Home"&#125;'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name: "About"&#125;'</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Loading-Routes-Lazily"><a href="#Loading-Routes-Lazily" class="headerlink" title="Loading Routes Lazily"></a>Loading Routes Lazily</h2><p>考慮到大型專案頁面繁多，可以將路由歸納整合，且只在需要時載入，可以減輕 browser loading 提升效能！<br>在載入路由時需要做點調整，原本 import component 是這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span></span><br></pre></td></tr></table></figure></p><p>這邊要改由 promise 的方式宣告<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/Home'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/Home'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣一來 Home 的路由就不會在一開始被包進 build.js ，而是在進入 Home 頁面時才會加載一支 1.build.js，更進一步來說，像是 User, UserInfo, UserCart … 等都是來自同一個 root path 的頁面(非必要，只是通常會這樣分類)，就可以在這邊設定當進入 User 頁面時再加載與他相關的其他頁面，如此一來節省的封包容量又更多了！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/User'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/User'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> UserInfo = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/UserInfo'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/UserInfo'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> UserCart = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/UserCart'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/UserCart'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="tab-切換"><a href="#tab-切換" class="headerlink" title="tab 切換"></a>tab 切換</h2><p>在有 components 的概念以前，製作 tab 切換時都是一次寫好所有內容，再透過 CSS or js 來切換各自的顯示(display)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab1'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab2'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab3'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但這時候可以用 component 來切換要載入的區塊，這些 tab 都轉換成 component 的方式導入主頁面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tab1 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab1.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab2 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab2.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab3 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab3.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Tab1, Tab2, Tab3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在 template 中不需要將個別 tag 載入，只要加一個 component tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">'currentTab'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>v-bind:is</strong> 就是判斷要載入哪個 component 的位置，讓他預設為 Tab1(字串名稱必須與 component name 一致)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tab1 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab1.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab2 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab2.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab3 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab3.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">currentTab: <span class="string">'Tab1'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">Tab1, Tab2, Tab3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接著一樣透過上面寫的 li 來切換 currentTab 的字串<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab1"'</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab2"'</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab3"'</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">'currentTab'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="注意-Component-tag"><a href="#注意-Component-tag" class="headerlink" title="注意 Component tag"></a>注意 Component tag</h2><blockquote><p>有些 HTML 元素，諸如 ul、ol、table 和 select，對於哪些元素可以出現在其內部是有嚴格限制的。而有些元素，諸如 li、tr 和 option，只能出現在其它某些特定的元素內部。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post-row</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>這種結構有可能在瀏覽器解析時發生解析錯誤，所以要做以下修正<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"blog-post-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但官方又說了：</p><blockquote><p>需要注意的是如果我們從以下來源使用模板的話，這條限制是不存在的：</p><ol><li>字符串 (例如：template: ‘…’)</li><li>單文件組件 (.vue)</li><li>&lt;script type=”text/x-template”></li></ol></blockquote><p>我知道的方法除了第三點的 jsx，就是 template 跟 .vue file 了，所以 … 也不知道他說會出錯是在哪種情況下😅</p><p><i>To Be Continued …</i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把 Udemy Max 的課看到一個進度後，發現其實自己在使用 Vue 的時候還有很多可以優化的地方，所以撥個時間把&lt;a href=&quot;https://vuejs.org/v2/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文件&lt;/a&gt;看個仔細，紀錄一下在課程及文件中學到的新知識。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>手把手的 Vue-cli</title>
    <link href="http://yoursite.com/2018/05/23/handmade-vue-project/"/>
    <id>http://yoursite.com/2018/05/23/handmade-vue-project/</id>
    <published>2018-05-23T02:05:32.000Z</published>
    <updated>2018-05-28T03:52:45.050Z</updated>
    
    <content type="html"><![CDATA[<p>首先第一步當然是先安裝 Vue-cli ，使用 webpack 開發 Vue 時可以有以下幾種版本建立專案：</p><ol><li>webpack</li><li>webpack-simple</li><li>browserify</li><li>browserify-simple</li><li>simple</li></ol><p>但真正要看的其實只有前兩個，因為 3 跟 4 的 browserify 我沒用過也沒看別人用過 😓<br>至於第五個 simple 實在是太簡略了，讓你從一個 html 開始發展，如果說用 webpack 版本是學步娃的階段，webpack-simple 就是剛臨盆下來砍掉重練的感覺，而 simple 就是一顆受精卵 … 😦</p><a id="more"></a><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>通常我都直接使用 webpack 版設定比較完整，但東西也相對較 simple 多，可能會有很多用不到的東西也一併安裝了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue init webpack project-name</span></span><br></pre></td></tr></table></figure><p>如果後面沒有指定 project-name 的話就會在當下的位置開始 init (注意現在 terminal 的位置不然會崩潰)<br>再來就逐一設定專案相關的資訊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ver: 2.9.1</span><br><span class="line"></span><br><span class="line">? Project name (project-name)</span><br><span class="line">? Project description ( xxxxx )</span><br><span class="line">? Author (you)</span><br><span class="line">? Vue build (Runtime + Compiler: recommended for most user)</span><br><span class="line">  就是第一個</span><br><span class="line">? Install vue-router (Y)</span><br><span class="line">? Use ESlint to line your code</span><br><span class="line">  這邊看專案需不需要，Y 的話就選擇哪一種 Lint 規範</span><br><span class="line">? Set up unit tests </span><br><span class="line">  if 你有在寫測試的話 Y </span><br><span class="line">  else N</span><br><span class="line">? Setup e2e tests with Nightwatch</span><br><span class="line">  同上</span><br><span class="line">? Should we run `npm install` for you after the project has been created ?</span><br><span class="line">  if NPM 第一個 </span><br><span class="line">  else if yarn 第二個</span><br><span class="line">  else 第三個自己之後再安裝</span><br></pre></td></tr></table></figure><p>接著因為個人都會用 pug sass 來開發，所以還會安裝以下這些插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D pug pug-loader sass sass-loader node-sass</span></span><br></pre></td></tr></table></figure><p>因為這兩者都是開發階段才會用到所以會存在 dev 中</p><p>安裝後找到 /build 目錄下的 webpack.base.conf.js 加入一些規則</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  loader: <span class="string">'style!css!sass?sourceMap'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  loader: <span class="string">'pug'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果是 VS code 開發者可以再接著做以下設定寫起來會更方便！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// vs code setting</span><br><span class="line">"emmet.syntaxProfiles": &#123;</span><br><span class="line">    "vue": "pug scss"</span><br><span class="line">&#125;</span><br><span class="line">"emmet.includeLanguages": &#123;</span><br><span class="line">    "vue": "pug"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣在 .vue 中的 pug 才能使用 emmet 語法</p><hr><h6 id="2018-05-24-更新："><a href="#2018-05-24-更新：" class="headerlink" title="2018/05/24 更新："></a>2018/05/24 更新：</h6><p>剛剛看了一下 github 的追蹤發現雨溪他有新增一個 pug 的<a href="https://github.com/yyx990803/pug-plain-loader" target="_blank" rel="noopener">編譯插件</a></p><blockquote><p>This loader is mostly intended to be used alongside vue-loader v15+, since it now requires using webpack loaders to handle template preprocessors. There’s also pug-html-loader which unfortunately is out-of-date and not actively maintained.</p></blockquote><p>看起來好像是跟 Vue 更好相容，而且可以在 .vue 中引入 .pug 的模組</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D pug-plain-loader pug</span></span><br></pre></td></tr></table></figure><p>rules 的部分也要修改 loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  loader: <span class="string">'pug-plain-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後面也有提到如果有插入 pug 模組的需求的話 rules 要修改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  oneOf: [</span><br><span class="line">    <span class="comment">// this applies to pug imports inside JavaScript</span></span><br><span class="line">    &#123;</span><br><span class="line">      exclude: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: [<span class="string">'raw-loader'</span>, <span class="string">'pug-plain-loader'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// this applies to &lt;template lang="pug"&gt; in Vue components</span></span><br><span class="line">    &#123;</span><br><span class="line">      use: [<span class="string">'pug-plain-loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己是還沒試過這個 plugin 😅 因為目前用 pug-loader 還沒遇到什麼問題，如果有嘗試再分享 👋</p><hr><h2 id="webpack-simple"><a href="#webpack-simple" class="headerlink" title="webpack-simple"></a>webpack-simple</h2><p>跟 webpack 選項比起來要設定的東西就沒那麼多了，但 simple 有一點我認為比 webpack 好的是他會問你要不要安裝 sass 😭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Project name (project-name)</span><br><span class="line">? Project description ( xxxxx )</span><br><span class="line">? Author (you)</span><br><span class="line">? License (MIT)</span><br><span class="line">? Use sass (YYYYYYYYYYYYY)</span><br></pre></td></tr></table></figure><p>主要差異就在於 vue-router 要自己安裝設定，然後他不會幫你跑 npm install，進到專案也可以發現 webpack config 設定也只剩一支<br>那接著就是來看看怎麼導入 vue-router</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -S vue-router</span></span><br></pre></td></tr></table></figure><p>在 main.js 中宣告 vue-router 並註冊給 vue 使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></p><p>再來要給每一個 component 定義路由，通常會另外用一個 js file 來區分，但直接寫在 main.js 也是可以作用的(較不推薦)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/src/routes.js</span><br><span class="line"></span><br><span class="line">import Home from '@/components/Home'</span><br><span class="line"></span><br><span class="line">export const routes = [</span><br><span class="line">&#123;</span><br><span class="line">path: '/',</span><br><span class="line">component: Home</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>設定好每個頁面的路由後，要將這個路由的目錄讓 Vue 他老大知道，所以我們回到 main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;routes&#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">router,</span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這樣純手工的 vue-router 就大抵完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先第一步當然是先安裝 Vue-cli ，使用 webpack 開發 Vue 時可以有以下幾種版本建立專案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack&lt;/li&gt;
&lt;li&gt;webpack-simple&lt;/li&gt;
&lt;li&gt;browserify&lt;/li&gt;
&lt;li&gt;browserify-simple&lt;/li&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但真正要看的其實只有前兩個，因為 3 跟 4 的 browserify 我沒用過也沒看別人用過 😓&lt;br&gt;至於第五個 simple 實在是太簡略了，讓你從一個 html 開始發展，如果說用 webpack 版本是學步娃的階段，webpack-simple 就是剛臨盆下來砍掉重練的感覺，而 simple 就是一顆受精卵 … 😦&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>如何讓 Vue 記住「上一頁」的位置</title>
    <link href="http://yoursite.com/2018/05/19/vue-router-trick/"/>
    <id>http://yoursite.com/2018/05/19/vue-router-trick/</id>
    <published>2018-05-19T13:14:54.000Z</published>
    <updated>2018-05-28T03:52:45.051Z</updated>
    
    <content type="html"><![CDATA[<p>在做自己第一個專案，同時也是第一個 Vue 專案時，就曾經被 PM 的一個需求卡住：「使用者回上一頁要知道他之前在哪」，這個問題據我所知之前好像都是交由後端來處理，像是會用 url 帶入某些參數來讓頁面去做回復視窗位置的動作，但 Vue ?</p><a id="more"></a><p>在那個專案中我採用的做法是將 components keep-alive (沒錯幾乎全部)，來讓頁面一直保持離開時的位置，但這樣還不夠，還必須再透過一個瀏覽器偵測「上一頁」動作的 function: popstate(有點忘了)，來判斷是不是要回到頁面最頂部。</p><p>問題可想而知，每個頁面都不會被 destroy 的情況下，載入速度好像就有這麼一點差，慶幸的是這個專案規模還不算大，不至於讓人有過長的等待時間，而今天在進修 Maximilian Schwarzmüller 大神的 <a href="https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview" target="_blank" rel="noopener">Vue 2</a> 教學時剛好看到了這個部分！</p><p>一般而言 Vue router 再切換 router-view 時並不會幫你把視窗拉到最頂開始瀏覽(就算已經被 rebuild 的 component 也是)，所以我都會在每次 router 切換時將 html, body 拉到 (0, 0) 的位置，但其實 Vue router 已經有一個 <a href="https://router.vuejs.org/en/advanced/scroll-behavior.html" target="_blank" rel="noopener">scrollBehavior</a> 的 callback 給我們操作了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return desired position</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>像剛剛回到最頂的問題就可以透過 return {x: 0, y: 0} 來完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>而回到這篇文章的重點，可以看到 scrollBehavior 第三個參數 savedPosition，就是這次的 key player，剛開始看完整份 doc 還是不知道要怎麼存取 savedPosition，但其實不用，實際做過一遍後只要像這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (savedPosition) <span class="keyword">return</span> savedPosition</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也不需要透過 keep-alive，Vue router 便會自動幫你抓取瀏覽器所存的「上一頁」位置，同理「下一頁」亦可！看到 doc 裡面這段</p><blockquote><p>Note: this feature only works if the browser supports history.pushState.</p></blockquote><p>也就是：只有在支援歷史紀錄的瀏覽器才適用（不負責翻譯）<br>這邊的歷史紀錄並不是指瀏覽過哪些網頁的紀錄，而是像在 Chrome 的主控台可以呼叫出 history 的指令的這個功能</p><p>看完這門課突然覺得腦門頓開絕頂升天，本來還在研究怎麼在 component 中寫紀錄滾動行為的 function …<br><small><i>(沒錯還有動 localStorage 或 VueX 的歪腦筋)</i></small></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做自己第一個專案，同時也是第一個 Vue 專案時，就曾經被 PM 的一個需求卡住：「使用者回上一頁要知道他之前在哪」，這個問題據我所知之前好像都是交由後端來處理，像是會用 url 帶入某些參數來讓頁面去做回復視窗位置的動作，但 Vue ?&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 實用方法</title>
    <link href="http://yoursite.com/2018/05/14/js-things/"/>
    <id>http://yoursite.com/2018/05/14/js-things/</id>
    <published>2018-05-14T02:16:12.000Z</published>
    <updated>2018-05-19T13:13:50.418Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天吳哲宇老師又重返直播，主題是 <a href="https://www.youtube.com/watch?v=maFbo96YT8U" target="_blank" rel="noopener">Vue + Socket 的配置教學</a>，上次即時互動是用 Vue + firebase 模擬一個 LINE 的即時訊息傳遞，而這次的 Socket 是 realtime 界中的霸主，所以十點準時守在電腦前開播。</p><a id="more"></a><p>firebase 的專案主要是參照一位 Gua’s 大大的部落格刻出來的<br><img src="https://i.imgur.com/yfIyYsk.png" alt="Chatroom"><br><small><a href="https://guahsu.io/2017/09/vue-firebase-realtime-line-chat/" target="_blank" rel="noopener">來源參照</a></small></p><p>但我發現使用 firebase 不需要打 restful 就會幫你自動更新 data ，說是方便但也有那麼一點感覺不到前後端互動，總覺得要做一點 get post 的事情才完整，但整體下來做完的成就感還是很高，之後學會 PWA 有機會還能在幫他升級一下。</p><p>回到直播內容，這次雖然來不及講到 Socket 但中間也帶了一些以前沒想過的 js 用法，就順道把之前紀錄在 Hack MD 上的 js 一併移過來分享</p><h2 id="Array-的亂數排序"><a href="#Array-的亂數排序" class="headerlink" title="Array 的亂數排序"></a>Array 的亂數排序</h2><p>情境如果像是線上題庫需要隨機出題的話，方法之一是在整個題目陣列中取前幾個物件，而為了要達到「隨機」可以每次取出前將陣列打亂，而隨機這就是就可以用 sort 來達成，sort 的特性是：<br>當 return 值為負數 =&gt; a 往前 b 往後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">345</span>, <span class="number">467</span>, <span class="number">3</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> sort1 = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sort1) <span class="comment">// [1, 3, 24, 345, 467]</span></span><br></pre></td></tr></table></figure></p><p>當 return 值為正數 =&gt; b 往前 a 往後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">345</span>, <span class="number">467</span>, <span class="number">3</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> sort1 = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sort1) <span class="comment">// [467, 345, 24, 3, 1]</span></span><br></pre></td></tr></table></figure></p><p>所以最重要的是在那個 return 值的數為正為負，當需要「隨機」時就表示只要讓那個 return 隨機變為正、負<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">656</span>, <span class="number">23</span>, <span class="number">46</span>, <span class="number">68</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> randomArr = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">.5</span>)</span><br></pre></td></tr></table></figure></p><p>因為 Math.random() 輸出的數值會落在 0 ~ 1 ，減去平均數 0.5 後便可以平均的出現正數與負數，達到亂數排序的目的</p><h2 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a>Array.prototype</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">A</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">B</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">C</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;A: 1, a: 2&#125;</span></span><br><span class="line"><span class="comment">// &#123;B: 3, b: 4&#125;</span></span><br><span class="line"><span class="comment">// &#123;C: 5, c: 6&#125;</span></span><br></pre></td></tr></table></figure><p>forEach 會循環每個物件的所有值, 不同於 for(let i=1 …) 可以較清楚當下的物件是誰且賦予新屬性等, 例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">A</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">B</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">C</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  obj.addKey = <span class="number">87</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arr = [</span></span><br><span class="line"><span class="comment">  &#123;A: 1, a: 2, addKey: 87&#125;,</span></span><br><span class="line"><span class="comment">  &#123;B: 3, b: 4, addKey: 87&#125;,</span></span><br><span class="line"><span class="comment">  &#123;C: 5, c: 6, addKey: 87&#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>對 array 中的每個元素都做一次 callback, 並過濾回傳值為 true 的元素創建一個新的 array (origin array !== new array), filter 包含三個 args:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(callback[element, index, array])</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">66</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newarray = array.filter(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">3</span>)</span><br><span class="line"><span class="comment">// newarray: [4, 66]</span></span><br><span class="line"><span class="comment">// array: [1, 2, 4, 66]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>有點像 forEach 的作用, 不同的是 map 會產生新的 array, 適用於要對陣列加工處理卻又不想改變原陣列的時候使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line"><span class="keyword">let</span> newarray = array.map(<span class="function"><span class="params">obj</span> =&gt;</span> obj + <span class="number">1</span> )</span><br><span class="line"><span class="comment">// newarray: [4, 5, 7, 88]</span></span><br><span class="line"><span class="comment">// array: [3, 4, 6, 87]</span></span><br></pre></td></tr></table></figure></p><p>再取出陣列中物件的特定值也很方便<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Nick'</span>, <span class="attr">age</span>: <span class="number">46</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Sebastine'</span>, <span class="attr">age</span>: <span class="number">53</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Johnason'</span>, <span class="attr">age</span>: <span class="number">27</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ages = people.map(<span class="function"><span class="params">person</span> =&gt;</span> person.age)</span><br><span class="line"><span class="comment">// ages: [46, 53, 27]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = people.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name)</span><br><span class="line"><span class="comment">// ages: ['Nick', 'Sebastine', 'Johnason']</span></span><br></pre></td></tr></table></figure></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>對陣列中每個元素執行 callback, 當某一個元素條件成立就會返回 true, 而當所有元素執行後皆返回 false, some 也會 return false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line">array.some(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">50</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">array.some(<span class="function"><span class="params">obj</span> =&gt;</span> obj &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>搭配 filter 可以快速做兩個陣列資料比對的篩選<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Nick'</span>, <span class="attr">age</span>: <span class="number">46</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Sebastine'</span>, <span class="attr">age</span>: <span class="number">53</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Johnason'</span>, <span class="attr">age</span>: <span class="number">27</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ages = [<span class="number">22</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">53</span>, <span class="number">48</span>]</span><br><span class="line"><span class="comment">// 從 people 中選出 age 符合 ages 中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matched = people.filter(<span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> ages.some(<span class="function"><span class="params">a</span> =&gt;</span> a === person.age)</span><br><span class="line"><span class="comment">// 當 ages.some 符合時會 return true, 此時 filter 接收到 true 後會將當下的 person 篩出</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">matched: [</span></span><br><span class="line"><span class="comment">&#123; name: 'Sebastine', age: 53 &#125;,</span></span><br><span class="line"><span class="comment">&#123; name: 'Johnason', age: 27 &#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">更簡潔作法：<span class="keyword">let</span> matched = people.filter(<span class="function"><span class="params">person</span> =&gt;</span> ages.some(<span class="function"><span class="params">a</span> =&gt;</span> a === person.age))</span><br></pre></td></tr></table></figure></p><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>與 some 相反，必須所有元素皆為 true 才會返回 true, 否則為 false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line">array.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj &lt; <span class="number">60</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">array.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">2</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>:::info<br>some：someone match =&gt; true<br>every：everyone match =&gt; true<br>:::</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>將陣列中的元素回傳出一個總和, 可傳入四個 args:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reduce(callback[accumlator, currentValue, currentIndex, array], initialValue)</span><br><span class="line">accumlator: 目前的總和</span><br><span class="line">currentValue: 現值</span><br><span class="line">currentIndex: 現值的索引</span><br><span class="line">array: 原陣列</span><br><span class="line">initialValue(optional): 初始值</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">345</span>, <span class="number">64</span>, <span class="number">532</span>]</span><br><span class="line"><span class="keyword">let</span> sum = array.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class="line"><span class="comment">// sum: 2 + 2 = 4</span></span><br><span class="line"><span class="comment">// sum: 4 + 345 = 349</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// sum: 945</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=== with initialValue ===</span></span><br><span class="line"><span class="keyword">let</span> sum = array.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur, <span class="number">55</span>)</span><br><span class="line"><span class="comment">// sum: 55 + 2 = 57</span></span><br><span class="line"><span class="comment">// sum: 57 + 2 = 59</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// sum: 1000</span></span><br></pre></td></tr></table></figure><hr><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop, obj[prop])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'a 1'</span></span><br><span class="line"><span class="comment">// 'b 2'</span></span><br><span class="line"><span class="comment">// 'c 3'</span></span><br></pre></td></tr></table></figure><p>for … in 是針對物件 key 值的遍歷方法, 不適合對陣列使用</p><h3 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h3><p>JavaScript6裡引入了一種新的循環方法，它就是for-of循環，它既比傳統的for循環簡潔，同時彌補了forEach和for … in循環的短板<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'hell'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'h'</span></span><br><span class="line"><span class="comment">// 'e'</span></span><br><span class="line"><span class="comment">// 'l'</span></span><br><span class="line"><span class="comment">// 'l'</span></span><br></pre></td></tr></table></figure><p>但以上 for 各自還是有自己的優點可取：</p><ul><li>for loop 可以自訂中斷點 break</li><li>for … of 不能像 forEach 一樣取得 index</li></ul><h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p>常用 sort 排序方法</p><ul><li><p>數列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">2</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升冪排序</span></span><br><span class="line">asc = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降冪排序</span></span><br><span class="line">desc = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line">     = [<span class="number">35</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = [<span class="string">'20020202T12:00:00Z'</span>, <span class="string">'20030303T13:00:00Z'</span>, ...]</span><br><span class="line">(timestamp 都可以)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升冪排序</span></span><br><span class="line">asc = date.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(a) - <span class="keyword">new</span> <span class="built_in">Date</span>(b)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降冪排序</span></span><br><span class="line">desc = date.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(b) - <span class="keyword">new</span> <span class="built_in">Date</span>(a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>字母</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = [<span class="string">'Dianna'</span>, <span class="string">'Renick'</span>, <span class="string">'Annie'</span>, <span class="string">'Irelia'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// A - Z</span></span><br><span class="line">string.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.toLowerCase().localeCompare(b.toLowerCase())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Z - A</span></span><br><span class="line">string.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> b.toLowerCase().localeCompare(a.toLowerCase())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>篩選數列中不重複的值</p><ol><li><p>filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(element) === index</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> repeat = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(element) !== index</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br><span class="line"><span class="built_in">console</span>.log(repeat) <span class="comment">// [1, "a"]</span></span><br></pre></td></tr></table></figure></li><li><p>Set( ) <font size="1px">==<em>ES6 以上</em>==</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> repeat = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  result.has(item) ? repeat.add(item) : result.add(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// &#123;1, 2, "a", 3, "b"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(repeat) <span class="comment">// &#123;1, "a"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>:::warning<br>此作法 Set() 取出的結果皆為物件！！<br>:::</p><ol start="3"><li><p>Set( ) + Array.from()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br></pre></td></tr></table></figure></li><li><p>Set( ) + Spread</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = [...(<span class="keyword">new</span> <span class="built_in">Set</span>(array))]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://guahsu.io/2017/06/JavaScript-Duplicates-Array/" target="_blank" rel="noopener">參照：JavaScript取出陣列重複/不重複值的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前幾天吳哲宇老師又重返直播，主題是 &lt;a href=&quot;https://www.youtube.com/watch?v=maFbo96YT8U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue + Socket 的配置教學&lt;/a&gt;，上次即時互動是用 Vue + firebase 模擬一個 LINE 的即時訊息傳遞，而這次的 Socket 是 realtime 界中的霸主，所以十點準時守在電腦前開播。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/11/hello-world/"/>
    <id>http://yoursite.com/2018/05/11/hello-world/</id>
    <published>2018-05-11T02:26:19.393Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>談談 Hexo 怎麼配置</title>
    <link href="http://yoursite.com/2018/05/10/hexo-things/"/>
    <id>http://yoursite.com/2018/05/10/hexo-things/</id>
    <published>2018-05-10T06:52:29.000Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>一開始接觸 Hexo 前就有聽聞他的支援套件很豐富，起手第一件就是先找個順眼的 theme，但因為每個主題提供的客製化程度都不一樣，所以挑了一圈最後還是選擇大眾口味的 Next，以下就大至分享我自己的 Next 設定以及整理一些解坑的方法。</p><a id="more"></a><p>在開始前有兩個名稱相同，位置設定卻大不同的檔案要分清楚：</p><ol><li><font color="#156c08" style="font-weight: bold">Next 配置檔</font>：/themes/_config.yml</li><li><font color="#780909" style="font-weight: bold">Hexo 配置檔</font>：/_config.yml</li></ol><p>有些配置會在這兩個 config 間設定，就暫且叫他們 <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> <font style="color: white; background-color: #780909; padding: 0 5px; border-radius: 3px;">Hexo config</font> 不然很容易搞混 … </p><h2 id="安裝-Next"><a href="#安裝-Next" class="headerlink" title="安裝 Next"></a>安裝 Next</h2><p>首先當然要先安裝 Next 本人，到 hexo 資料夾下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>再來找到 <font style="color: white; background-color: #780909; padding: 0 5px; border-radius: 3px;">Hexo config</font> 裡面的 theme 改成 next<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></p><p><small><a href="https://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">來源參照(大部分設定都可以在這找到)</a></small></p><h2 id="設定-Navbar"><a href="#設定-Navbar" class="headerlink" title="設定 Navbar"></a>設定 Navbar</h2><p><img src="https://i.imgur.com/tgIwioK.png" alt="Navbar"></p><p>Navbar 在一開始預設只有兩個，分別是首頁 (home) 跟歸檔 (archive)，首先在 <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> 找到下面這段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>把 tags 跟 categories 註解拿掉就會顯示在 Navbar 上，但這邊只是「顯示」，點進去還沒有頁面可以呈現，接著在 terminal 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>建立成功後會告訴你路徑位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>找到這個 index.md 後會看到預設內容，在下面新增一行 type: “categories”</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-10</span> <span class="number">11</span><span class="string">:27:42</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>tags 頁面比照 categories 作法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-10</span> <span class="number">11</span><span class="string">:27:42</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>要將文章歸類或附上標籤的話，只要在 post head 上新增 categories 跟 tags，格式如下<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 談談 Hexo 怎麼配置</span><br><span class="line">date: 2018-05-10 14:52:29</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Note</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p><strong>需要注意的是 tags 可以一直往下新增，但 categories 只會讀第一行去分類！</strong></p><p><em>搜尋功能我還在摸索 … 只是開著看起來比較完整但千萬不要去按</em></p><p><small><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener">來源參照</a></small></p><h2 id="隱藏文章"><a href="#隱藏文章" class="headerlink" title="隱藏文章"></a>隱藏文章</h2><p>Hexo 原先有一個新增 draft 文件的功能，但常常有些舊文章或已經發布的文章就是突然想要偷偷藏起來，就非常需要這個功能，先打開 themes/next/index.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>這份文件就是負責顯示你的文章列表，可以看到 ‘for post in page.posts’ 這個 for loop 把每一個文章都吐出來，所以要在這邊下個判斷是來篩選掉要隱藏的文章 (我用 visible: boolean 變數名稱可自訂)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;% if (post.visible) %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接著到文章內來定義 visible</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 談談 Hexo 怎麼配置</span><br><span class="line">date: 2018-05-10 14:52:29</span><br><span class="line">visible: true</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Note</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>到這邊列表頁就會去篩選每一篇文章的 visible 來決定顯示與否，但這樣還有一個麻煩處：<br><strong>我每次 hexo new 一個新的 post 都要去加他</strong></p><p>於是更懶也更進階的方式就是在每個 post 生成的 template 加入這個變數，打開 /scaffolds/post.md 看到如下的預設值<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>這就是每次 hexo new post-name 生出來的 post-name.md 中的架構，只要對他動點手腳<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">visible: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>我順便把 tags 跟 categories 的定義一併加上去，這樣就不需要每次都手動去設定 true false 了！</p><p><small><a href="http://forwardkth.github.io/2016/05/08/next-theme-post-visibility/" target="_blank" rel="noopener">來源參照</a></small></p><h2 id="代碼背景顏色設定"><a href="#代碼背景顏色設定" class="headerlink" title="代碼背景顏色設定"></a>代碼背景顏色設定</h2><p>這部分算是選配，next 預設代碼背色是白的，但個人比較偏好深色系，所以只好動手了 …<br>到  <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> 找出下面這段就很清楚了 (註解都有寫)<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一開始接觸 Hexo 前就有聽聞他的支援套件很豐富，起手第一件就是先找個順眼的 theme，但因為每個主題提供的客製化程度都不一樣，所以挑了一圈最後還是選擇大眾口味的 Next，以下就大至分享我自己的 Next 設定以及整理一些解坑的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>入住 Hexo 的第一天</title>
    <link href="http://yoursite.com/2018/05/09/first-post/"/>
    <id>http://yoursite.com/2018/05/09/first-post/</id>
    <published>2018-05-09T09:49:10.000Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>開始寫扣以來就有被灌輸要有寫部落格紀錄學習進度的習慣，一方面是可以分享自己的想法，再者是前端無遠弗屆，腦子卻只有豆丁點大，可以幫助自己歸類記憶。</p><a id="more"></a><h2 id="Logdown"><a href="#Logdown" class="headerlink" title="Logdown"></a><a href="https://logdown.com/" target="_blank" rel="noopener">Logdown</a></h2><p>第一個用的是 Logdown 的系統，他給我的感覺很陽春 … 而那個時間點剛好是轉職不久，所以幾乎都是關於面試期間遇到的問題跟進度，回頭去看最後一篇在到職後的第一週就停止更新了 (´_ゝ`) 可能是寫日記這檔事自己覺得很監介，但之後還是有持續在用另一個筆記做紀錄</p><h2 id="Hack-MD"><a href="#Hack-MD" class="headerlink" title="Hack MD"></a><a href="https://hackmd.io/" target="_blank" rel="noopener">Hack MD</a></h2><p>這是第一次接觸 markdown 文件，一寫下去就很有親切感，因為基本上就是可以用 html css 來修飾變化，再來邊看文件記一下相關的 tag 怎麼輸出就很方便，到現在也用他在寫一些小技巧或筆記等的 code </p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>會知道 Hexo 是因為前陣子 Vue 有一個相關套件 Vuepress 正式發布，才讓我知道有這種可以把筆記回歸到編輯器的強大存在，以前找 google 總是看到一些部落格很簡潔酷炫，但怎麼好像每個人都會寫，還以為是前端應該要有的基礎部落格常識 … 現在看來原來是 Hexo 啊，還以為是同一個老師教的，至於不用 Vuepress 是因為考慮他剛問世，討論度跟支援套件相對較少，所以還是先用 Hexo 練練 markdown，之後也會再持續更新自己學到看到的東西。</p><p><a href="http://be-unick.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">uNickHow Website</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;開始寫扣以來就有被灌輸要有寫部落格紀錄學習進度的習慣，一方面是可以分享自己的想法，再者是前端無遠弗屆，腦子卻只有豆丁點大，可以幫助自己歸類記憶。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
  </entry>
  
</feed>
