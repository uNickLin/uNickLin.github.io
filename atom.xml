<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uNick&#39;s Blog</title>
  
  <subtitle>前端誤連網</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-07T09:06:58.357Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修煉前端 Week 1 - Todo List</title>
    <link href="http://yoursite.com/2018/06/07/sideproject-todolist/"/>
    <id>http://yoursite.com/2018/06/07/sideproject-todolist/</id>
    <published>2018-06-07T01:54:00.000Z</published>
    <updated>2018-06-07T09:06:58.357Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在 Facebook 上被廣吿推薦了一個「精神時光屋」的社團，原來裡面是六角學院的練功場，就毫不遲疑地加入，也很快迎來第一個活動：連續九週前端挑戰，第一週就是那個世人稱為最初的起點也是最後的終點的 Todo List (即興的霸氣 slogan)</p><a id="more"></a><p>Todo List 真要說起來也可以做得很大，還記得剛接觸框架時很多教學就是帶你手把手的建立一個 Todo List</p><iframe height="418" scrolling="no" title="[Vue] Todolist" src="//codepen.io/uNickHow/embed/MmzKQr/?height=418&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/uNickHow/pen/MmzKQr/" target="_blank" rel="noopener">[Vue] Todolist</a> by uNickHow (<a href="https://codepen.io/uNickHow" target="_blank" rel="noopener">@uNickHow</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>以及面試某家公司時被要求的 <a href="https://unicklin.github.io/Todolist_angular/" target="_blank" rel="noopener">Angular Todo List</a></p><p><img src="https://i.imgur.com/JO9QmMH.png" alt=""></p><p>這些入門款的待辦事項不需要太多功能，只要可以 C R <small style="text-decoration: line-through; color: grey">U(沒有你)</small> D 就好，但要做大還可以像 app 一樣有日期、提醒、上傳照片、分類等等，所以這次參加這項活動我就拿來實驗 Vue PWA</p><p>社團有提供基本的 user story 跟 <a href="https://hexschool.github.io/THE_F2E_Design/todolist/" target="_blank" rel="noopener">Wireframe</a>，接著就自行發揮囉！</p><p><img src="https://i.imgur.com/bTBQKcG.png" alt=""></p><p>稍做一點微調後，呈現的 UI 變成<a href="http://vtodo.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">這樣</a><br><img src="https://i.imgur.com/qWRUNxv.png" alt=""></p><p>因為我使用的是 Localstorage 暫存，所以偏向文字紀錄而不套用檔案上傳的功能<small style="text-decoration: line-through; color: grey">(也是可以做圖片上傳存成 base64 啦只是我懶 …)</small></p><p>也順手練習一下之前 Max 教的 transition，主要用在新增跟列表的 component 轉場，整體質感上升！<br>因為這次是以 PWA 為出發點，所以手機排版的部分就依照我自己覺得使用順手的仿 app Layout</p><p><img src="https://i.imgur.com/veh6sHn.png" alt=""></p><p>還很貼心的告訴使用者可以用 Safari 加到桌面喔！<br>雖然他是壞的但還是很大心</p><hr><p>這次的作品還有很大一部份的重心是自己真正實作 Vuex，之前都是看影片教學哦哦哦地點頭，好像很懂但其實不然，套用 Vuex 後終於告別 components 間的 emit hell 😭，不然那一坨一坨的 emit 每次看每次懷疑人生 …</p><p>接下來就像 Todo 所寫的，要解決 Muuri.js 的套用，如果不行還是繼續使用 vue-draggable，然後<strong>解決 PWA 暫存問題！</strong>，順利的話說不定還可以離線使用，最後再來處理圖片上傳<small style="text-decoration: line-through; color: grey">(如果有空, if, might, perhaps)</small></p><hr><p>2018/06/06 16:58</p><p>後記很快就來了，經過一整天跟 PWA 在手機不能開的問題勾勾纏後，突然想到既然他是從 Safari 去加到桌面，應該還是靠 Safari 來瀏覽的吧? 於是接上 lightning 馬上開 devtool 來瞧一瞧，才發現他怎麼會完全沒錯誤(!?)而且只有上頭的 Navbar 正常顯示，其他 router 怎麼沒有 render 進來，奇怪這好像在哪裡看過 !! 真的是絞盡腦漿後柳暗花明，才想起以前曾經直接去打開 npm run build 後的 index.html，想說他應該會自己 run app.js 才對(並不會)，就是跟這個情況一模模一樣樣，回頭去看他為什麼會打開 index.html</p><p><img src="https://i.imgur.com/neKi2L1.png" alt=""></p><p>嗯，又一個搞到自己的低級錯誤，改成 “/“ 就沒事了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子在 Facebook 上被廣吿推薦了一個「精神時光屋」的社團，原來裡面是六角學院的練功場，就毫不遲疑地加入，也很快迎來第一個活動：連續九週前端挑戰，第一週就是那個世人稱為最初的起點也是最後的終點的 Todo List (即興的霸氣 slogan)&lt;/p&gt;
    
    </summary>
    
      <category term="Side-projects" scheme="http://yoursite.com/categories/Side-projects/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="PWA" scheme="http://yoursite.com/tags/PWA/"/>
    
      <category term="Localstorage" scheme="http://yoursite.com/tags/Localstorage/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Vue Router 中使用 Vuex</title>
    <link href="http://yoursite.com/2018/05/29/vuex-in-vue-router/"/>
    <id>http://yoursite.com/2018/05/29/vuex-in-vue-router/</id>
    <published>2018-05-29T06:09:30.000Z</published>
    <updated>2018-05-29T07:10:39.847Z</updated>
    
    <content type="html"><![CDATA[<p>最近在練習的時候有遇到一個功能需求是：在 router 切換時都要關閉側邊欄 menu 的狀態(也就是隱藏)，因為 router view 本身只會做 component 抽換的動作，所以在 router view 之外的狀態都不會被更新。</p><a id="more"></a><p>這個動作在點擊切換時沒有問題，我們可以在 menu 的 ul 加上 @click function 來關閉側邊欄。但如果使用者操作「上一頁」「下一頁」時就會出現問題。</p><p><img src="https://i.imgur.com/7clnDHB.gif" alt=""></p><p>因為這次將這種全站式的功能寫進 Vuex 來操作，這樣如果其他 component 也需要用到 menu 開關的功能就會方便很多(不需要 props 來 emit 去了 …)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store (&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isMenuOpen: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    toggleMenu(state, boolean) &#123;</span><br><span class="line">      <span class="keyword">if</span> (boolean === <span class="literal">true</span> || boolean === <span class="literal">false</span>) state.isMenuOpen = boolean</span><br><span class="line">      <span class="keyword">else</span> state.isMenuOpen = !state.isMenuOpen</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根據這種需求看來，就可以使用到 router guard 中的 beforeEach 操作 Vuex 中的狀態，我們只消在 router 的檔案中引入存放 Vuex store 的檔案(e.g store.js)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'../store.js'</span></span><br></pre></td></tr></table></figure></p><p>由於我們使用的 hook 是 beforeEach ，這時候 Vue 還沒掛載，如果使用 Vue.store.commit 等等的做法會導致抓不到物件(undefined)，因此這邊直接以 store 操作即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">'../store.js'</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">'toggleMenu'</span>, <span class="literal">false</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>完成！<br><img src="https://i.imgur.com/TReVGiL.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在練習的時候有遇到一個功能需求是：在 router 切換時都要關閉側邊欄 menu 的狀態(也就是隱藏)，因為 router view 本身只會做 component 抽換的動作，所以在 router view 之外的狀態都不會被更新。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>Vue 的小細節</title>
    <link href="http://yoursite.com/2018/05/28/vue-doc/"/>
    <id>http://yoursite.com/2018/05/28/vue-doc/</id>
    <published>2018-05-28T02:36:31.000Z</published>
    <updated>2018-05-28T03:53:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 Udemy Max 的課看到一個進度後，發現其實自己在使用 Vue 的時候還有很多可以優化的地方，所以撥個時間把<a href="https://vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">官方文件</a>看個仔細，紀錄一下在課程及文件中學到的新知識。</p><a id="more"></a><h2 id="Router-路由名稱"><a href="#Router-路由名稱" class="headerlink" title="Router 路由名稱"></a>Router 路由名稱</h2><p>以前只會用一種 router-link 方式來切換：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;path: "/"&#125;'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其實沒有其他參數的情況下就跟一般路由一樣設定即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>這邊重要的是，path 除了 url 之外，也可以用 name 來定義，好處是未來若 url 層級變更，component 中的 router-link 不需要變動！</p><p>首先必須為每個路由命名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'Home'</span>,</span><br><span class="line">path: <span class="string">'/'</span>,</span><br><span class="line">component: Home</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'About'</span>,</span><br><span class="line">path: <span class="string">'/about'</span>,</span><br><span class="line">component: About</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name: "Home"&#125;'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">'&#123;name: "About"&#125;'</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Loading-Routes-Lazily"><a href="#Loading-Routes-Lazily" class="headerlink" title="Loading Routes Lazily"></a>Loading Routes Lazily</h2><p>考慮到大型專案頁面繁多，可以將路由歸納整合，且只在需要時載入，可以減輕 browser loading 提升效能！<br>在載入路由時需要做點調整，原本 import component 是這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span></span><br></pre></td></tr></table></figure></p><p>這邊要改由 promise 的方式宣告<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/Home'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/Home'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣一來 Home 的路由就不會在一開始被包進 build.js ，而是在進入 Home 頁面時才會加載一支 1.build.js，更進一步來說，像是 User, UserInfo, UserCart … 等都是來自同一個 root path 的頁面(非必要，只是通常會這樣分類)，就可以在這邊設定當進入 User 頁面時再加載與他相關的其他頁面，如此一來節省的封包容量又更多了！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/User'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/User'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> UserInfo = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/UserInfo'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/UserInfo'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> UserCart = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./components/UserCart'</span>], () =&gt; &#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">'./components/UserCart'</span>))</span><br><span class="line">&#125;, <span class="string">'user'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="tab-切換"><a href="#tab-切換" class="headerlink" title="tab 切換"></a>tab 切換</h2><p>在有 components 的概念以前，製作 tab 切換時都是一次寫好所有內容，再透過 CSS or js 來切換各自的顯示(display)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab1'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab2'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'.tab3'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Content 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但這時候可以用 component 來切換要載入的區塊，這些 tab 都轉換成 component 的方式導入主頁面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tab1 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab1.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab2 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab2.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab3 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab3.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Tab1, Tab2, Tab3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在 template 中不需要將個別 tag 載入，只要加一個 component tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">'currentTab'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>v-bind:is</strong> 就是判斷要載入哪個 component 的位置，讓他預設為 Tab1(字串名稱必須與 component name 一致)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Tab1 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab1.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab2 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab2.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tab3 <span class="keyword">from</span> <span class="string">'./components/Tabs/Tab3.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">currentTab: <span class="string">'Tab1'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">Tab1, Tab2, Tab3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接著一樣透過上面寫的 li 來切換 currentTab 的字串<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab1"'</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab2"'</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">'currentTab = "Tab3"'</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">'currentTab'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="注意-Component-tag"><a href="#注意-Component-tag" class="headerlink" title="注意 Component tag"></a>注意 Component tag</h2><blockquote><p>有些 HTML 元素，諸如 ul、ol、table 和 select，對於哪些元素可以出現在其內部是有嚴格限制的。而有些元素，諸如 li、tr 和 option，只能出現在其它某些特定的元素內部。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post-row</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>這種結構有可能在瀏覽器解析時發生解析錯誤，所以要做以下修正<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"blog-post-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但官方又說了：</p><blockquote><p>需要注意的是如果我們從以下來源使用模板的話，這條限制是不存在的：</p><ol><li>字符串 (例如：template: ‘…’)</li><li>單文件組件 (.vue)</li><li>&lt;script type=”text/x-template”></li></ol></blockquote><p>我知道的方法除了第三點的 jsx，就是 template 跟 .vue file 了，所以 … 也不知道他說會出錯是在哪種情況下😅</p><p><i>To Be Continued …</i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把 Udemy Max 的課看到一個進度後，發現其實自己在使用 Vue 的時候還有很多可以優化的地方，所以撥個時間把&lt;a href=&quot;https://vuejs.org/v2/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文件&lt;/a&gt;看個仔細，紀錄一下在課程及文件中學到的新知識。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>手把手的 Vue-cli</title>
    <link href="http://yoursite.com/2018/05/23/handmade-vue-project/"/>
    <id>http://yoursite.com/2018/05/23/handmade-vue-project/</id>
    <published>2018-05-23T02:05:32.000Z</published>
    <updated>2018-05-28T03:52:45.050Z</updated>
    
    <content type="html"><![CDATA[<p>首先第一步當然是先安裝 Vue-cli ，使用 webpack 開發 Vue 時可以有以下幾種版本建立專案：</p><ol><li>webpack</li><li>webpack-simple</li><li>browserify</li><li>browserify-simple</li><li>simple</li></ol><p>但真正要看的其實只有前兩個，因為 3 跟 4 的 browserify 我沒用過也沒看別人用過 😓<br>至於第五個 simple 實在是太簡略了，讓你從一個 html 開始發展，如果說用 webpack 版本是學步娃的階段，webpack-simple 就是剛臨盆下來砍掉重練的感覺，而 simple 就是一顆受精卵 … 😦</p><a id="more"></a><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>通常我都直接使用 webpack 版設定比較完整，但東西也相對較 simple 多，可能會有很多用不到的東西也一併安裝了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vue init webpack project-name</span><br></pre></td></tr></table></figure><p>如果後面沒有指定 project-name 的話就會在當下的位置開始 init (注意現在 terminal 的位置不然會崩潰)<br>再來就逐一設定專案相關的資訊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ver: 2.9.1</span><br><span class="line"></span><br><span class="line">? Project name (project-name)</span><br><span class="line">? Project description ( xxxxx )</span><br><span class="line">? Author (you)</span><br><span class="line">? Vue build (Runtime + Compiler: recommended for most user)</span><br><span class="line">  就是第一個</span><br><span class="line">? Install vue-router (Y)</span><br><span class="line">? Use ESlint to line your code</span><br><span class="line">  這邊看專案需不需要，Y 的話就選擇哪一種 Lint 規範</span><br><span class="line">? Set up unit tests </span><br><span class="line">  if 你有在寫測試的話 Y </span><br><span class="line">  else N</span><br><span class="line">? Setup e2e tests with Nightwatch</span><br><span class="line">  同上</span><br><span class="line">? Should we run `npm install` for you after the project has been created ?</span><br><span class="line">  if NPM 第一個 </span><br><span class="line">  else if yarn 第二個</span><br><span class="line">  else 第三個自己之後再安裝</span><br></pre></td></tr></table></figure><p>接著因為個人都會用 pug sass 來開發，所以還會安裝以下這些插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i -D pug pug-loader sass sass-loader node-sass</span><br></pre></td></tr></table></figure><p>因為這兩者都是開發階段才會用到所以會存在 dev 中</p><p>安裝後找到 /build 目錄下的 webpack.base.conf.js 加入一些規則</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  loader: <span class="string">'style!css!sass?sourceMap'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  loader: <span class="string">'pug'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果是 VS code 開發者可以再接著做以下設定寫起來會更方便！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// vs code setting</span><br><span class="line">"emmet.syntaxProfiles": &#123;</span><br><span class="line">    "vue": "pug scss"</span><br><span class="line">&#125;</span><br><span class="line">"emmet.includeLanguages": &#123;</span><br><span class="line">    "vue": "pug"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣在 .vue 中的 pug 才能使用 emmet 語法</p><hr><h6 id="2018-05-24-更新："><a href="#2018-05-24-更新：" class="headerlink" title="2018/05/24 更新："></a>2018/05/24 更新：</h6><p>剛剛看了一下 github 的追蹤發現雨溪他有新增一個 pug 的<a href="https://github.com/yyx990803/pug-plain-loader" target="_blank" rel="noopener">編譯插件</a></p><blockquote><p>This loader is mostly intended to be used alongside vue-loader v15+, since it now requires using webpack loaders to handle template preprocessors. There’s also pug-html-loader which unfortunately is out-of-date and not actively maintained.</p></blockquote><p>看起來好像是跟 Vue 更好相容，而且可以在 .vue 中引入 .pug 的模組</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -D pug-plain-loader pug</span><br></pre></td></tr></table></figure><p>rules 的部分也要修改 loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  loader: <span class="string">'pug-plain-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後面也有提到如果有插入 pug 模組的需求的話 rules 要修改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  oneOf: [</span><br><span class="line">    <span class="comment">// this applies to pug imports inside JavaScript</span></span><br><span class="line">    &#123;</span><br><span class="line">      exclude: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: [<span class="string">'raw-loader'</span>, <span class="string">'pug-plain-loader'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// this applies to &lt;template lang="pug"&gt; in Vue components</span></span><br><span class="line">    &#123;</span><br><span class="line">      use: [<span class="string">'pug-plain-loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己是還沒試過這個 plugin 😅 因為目前用 pug-loader 還沒遇到什麼問題，如果有嘗試再分享 👋</p><hr><h2 id="webpack-simple"><a href="#webpack-simple" class="headerlink" title="webpack-simple"></a>webpack-simple</h2><p>跟 webpack 選項比起來要設定的東西就沒那麼多了，但 simple 有一點我認為比 webpack 好的是他會問你要不要安裝 sass 😭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Project name (project-name)</span><br><span class="line">? Project description ( xxxxx )</span><br><span class="line">? Author (you)</span><br><span class="line">? License (MIT)</span><br><span class="line">? Use sass (YYYYYYYYYYYYY)</span><br></pre></td></tr></table></figure><p>主要差異就在於 vue-router 要自己安裝設定，然後他不會幫你跑 npm install，進到專案也可以發現 webpack config 設定也只剩一支<br>那接著就是來看看怎麼導入 vue-router</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i -S vue-router</span><br></pre></td></tr></table></figure><p>在 main.js 中宣告 vue-router 並註冊給 vue 使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></p><p>再來要給每一個 component 定義路由，通常會另外用一個 js file 來區分，但直接寫在 main.js 也是可以作用的(較不推薦)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/src/routes.js</span><br><span class="line"></span><br><span class="line">import Home from '@/components/Home'</span><br><span class="line"></span><br><span class="line">export const routes = [</span><br><span class="line">&#123;</span><br><span class="line">path: '/',</span><br><span class="line">component: Home</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>設定好每個頁面的路由後，要將這個路由的目錄讓 Vue 他老大知道，所以我們回到 main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;routes&#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">router,</span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這樣純手工的 vue-router 就大抵完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先第一步當然是先安裝 Vue-cli ，使用 webpack 開發 Vue 時可以有以下幾種版本建立專案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack&lt;/li&gt;
&lt;li&gt;webpack-simple&lt;/li&gt;
&lt;li&gt;browserify&lt;/li&gt;
&lt;li&gt;browserify-simple&lt;/li&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但真正要看的其實只有前兩個，因為 3 跟 4 的 browserify 我沒用過也沒看別人用過 😓&lt;br&gt;至於第五個 simple 實在是太簡略了，讓你從一個 html 開始發展，如果說用 webpack 版本是學步娃的階段，webpack-simple 就是剛臨盆下來砍掉重練的感覺，而 simple 就是一顆受精卵 … 😦&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>如何讓 Vue 記住「上一頁」的位置</title>
    <link href="http://yoursite.com/2018/05/19/vue-router-trick/"/>
    <id>http://yoursite.com/2018/05/19/vue-router-trick/</id>
    <published>2018-05-19T13:14:54.000Z</published>
    <updated>2018-05-28T03:52:45.051Z</updated>
    
    <content type="html"><![CDATA[<p>在做自己第一個專案，同時也是第一個 Vue 專案時，就曾經被 PM 的一個需求卡住：「使用者回上一頁要知道他之前在哪」，這個問題據我所知之前好像都是交由後端來處理，像是會用 url 帶入某些參數來讓頁面去做回復視窗位置的動作，但 Vue ?</p><a id="more"></a><p>在那個專案中我採用的做法是將 components keep-alive (沒錯幾乎全部)，來讓頁面一直保持離開時的位置，但這樣還不夠，還必須再透過一個瀏覽器偵測「上一頁」動作的 function: popstate(有點忘了)，來判斷是不是要回到頁面最頂部。</p><p>問題可想而知，每個頁面都不會被 destroy 的情況下，載入速度好像就有這麼一點差，慶幸的是這個專案規模還不算大，不至於讓人有過長的等待時間，而今天在進修 Maximilian Schwarzmüller 大神的 <a href="https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview" target="_blank" rel="noopener">Vue 2</a> 教學時剛好看到了這個部分！</p><p>一般而言 Vue router 再切換 router-view 時並不會幫你把視窗拉到最頂開始瀏覽(就算已經被 rebuild 的 component 也是)，所以我都會在每次 router 切換時將 html, body 拉到 (0, 0) 的位置，但其實 Vue router 已經有一個 <a href="https://router.vuejs.org/en/advanced/scroll-behavior.html" target="_blank" rel="noopener">scrollBehavior</a> 的 callback 給我們操作了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return desired position</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>像剛剛回到最頂的問題就可以透過 return {x: 0, y: 0} 來完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>而回到這篇文章的重點，可以看到 scrollBehavior 第三個參數 savedPosition，就是這次的 key player，剛開始看完整份 doc 還是不知道要怎麼存取 savedPosition，但其實不用，實際做過一遍後只要像這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (savedPosition) <span class="keyword">return</span> savedPosition</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也不需要透過 keep-alive，Vue router 便會自動幫你抓取瀏覽器所存的「上一頁」位置，同理「下一頁」亦可！看到 doc 裡面這段</p><blockquote><p>Note: this feature only works if the browser supports history.pushState.</p></blockquote><p>也就是：只有在支援歷史紀錄的瀏覽器才適用（不負責翻譯）<br>這邊的歷史紀錄並不是指瀏覽過哪些網頁的紀錄，而是像在 Chrome 的主控台可以呼叫出 history 的指令的這個功能</p><p>看完這門課突然覺得腦門頓開絕頂升天，本來還在研究怎麼在 component 中寫紀錄滾動行為的 function …<br><small><i>(沒錯還有動 localStorage 或 VueX 的歪腦筋)</i></small></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做自己第一個專案，同時也是第一個 Vue 專案時，就曾經被 PM 的一個需求卡住：「使用者回上一頁要知道他之前在哪」，這個問題據我所知之前好像都是交由後端來處理，像是會用 url 帶入某些參數來讓頁面去做回復視窗位置的動作，但 Vue ?&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Vue 2.x" scheme="http://yoursite.com/tags/Vue-2-x/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 實用方法</title>
    <link href="http://yoursite.com/2018/05/14/js-things/"/>
    <id>http://yoursite.com/2018/05/14/js-things/</id>
    <published>2018-05-14T02:16:12.000Z</published>
    <updated>2018-05-19T13:13:50.418Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天吳哲宇老師又重返直播，主題是 <a href="https://www.youtube.com/watch?v=maFbo96YT8U" target="_blank" rel="noopener">Vue + Socket 的配置教學</a>，上次即時互動是用 Vue + firebase 模擬一個 LINE 的即時訊息傳遞，而這次的 Socket 是 realtime 界中的霸主，所以十點準時守在電腦前開播。</p><a id="more"></a><p>firebase 的專案主要是參照一位 Gua’s 大大的部落格刻出來的<br><img src="https://i.imgur.com/yfIyYsk.png" alt="Chatroom"><br><small><a href="https://guahsu.io/2017/09/vue-firebase-realtime-line-chat/" target="_blank" rel="noopener">來源參照</a></small></p><p>但我發現使用 firebase 不需要打 restful 就會幫你自動更新 data ，說是方便但也有那麼一點感覺不到前後端互動，總覺得要做一點 get post 的事情才完整，但整體下來做完的成就感還是很高，之後學會 PWA 有機會還能在幫他升級一下。</p><p>回到直播內容，這次雖然來不及講到 Socket 但中間也帶了一些以前沒想過的 js 用法，就順道把之前紀錄在 Hack MD 上的 js 一併移過來分享</p><h2 id="Array-的亂數排序"><a href="#Array-的亂數排序" class="headerlink" title="Array 的亂數排序"></a>Array 的亂數排序</h2><p>情境如果像是線上題庫需要隨機出題的話，方法之一是在整個題目陣列中取前幾個物件，而為了要達到「隨機」可以每次取出前將陣列打亂，而隨機這就是就可以用 sort 來達成，sort 的特性是：<br>當 return 值為負數 =&gt; a 往前 b 往後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">345</span>, <span class="number">467</span>, <span class="number">3</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> sort1 = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sort1) <span class="comment">// [1, 3, 24, 345, 467]</span></span><br></pre></td></tr></table></figure></p><p>當 return 值為正數 =&gt; b 往前 a 往後<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">345</span>, <span class="number">467</span>, <span class="number">3</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> sort1 = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sort1) <span class="comment">// [467, 345, 24, 3, 1]</span></span><br></pre></td></tr></table></figure></p><p>所以最重要的是在那個 return 值的數為正為負，當需要「隨機」時就表示只要讓那個 return 隨機變為正、負<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">656</span>, <span class="number">23</span>, <span class="number">46</span>, <span class="number">68</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> randomArr = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">.5</span>)</span><br></pre></td></tr></table></figure></p><p>因為 Math.random() 輸出的數值會落在 0 ~ 1 ，減去平均數 0.5 後便可以平均的出現正數與負數，達到亂數排序的目的</p><h2 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a>Array.prototype</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">A</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">B</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">C</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;A: 1, a: 2&#125;</span></span><br><span class="line"><span class="comment">// &#123;B: 3, b: 4&#125;</span></span><br><span class="line"><span class="comment">// &#123;C: 5, c: 6&#125;</span></span><br></pre></td></tr></table></figure><p>forEach 會循環每個物件的所有值, 不同於 for(let i=1 …) 可以較清楚當下的物件是誰且賦予新屬性等, 例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">A</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">B</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">C</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  obj.addKey = <span class="number">87</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arr = [</span></span><br><span class="line"><span class="comment">  &#123;A: 1, a: 2, addKey: 87&#125;,</span></span><br><span class="line"><span class="comment">  &#123;B: 3, b: 4, addKey: 87&#125;,</span></span><br><span class="line"><span class="comment">  &#123;C: 5, c: 6, addKey: 87&#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>對 array 中的每個元素都做一次 callback, 並過濾回傳值為 true 的元素創建一個新的 array (origin array !== new array), filter 包含三個 args:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(callback[element, index, array])</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">66</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newarray = array.filter(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">3</span>)</span><br><span class="line"><span class="comment">// newarray: [4, 66]</span></span><br><span class="line"><span class="comment">// array: [1, 2, 4, 66]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>有點像 forEach 的作用, 不同的是 map 會產生新的 array, 適用於要對陣列加工處理卻又不想改變原陣列的時候使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line"><span class="keyword">let</span> newarray = array.map(<span class="function"><span class="params">obj</span> =&gt;</span> obj + <span class="number">1</span> )</span><br><span class="line"><span class="comment">// newarray: [4, 5, 7, 88]</span></span><br><span class="line"><span class="comment">// array: [3, 4, 6, 87]</span></span><br></pre></td></tr></table></figure></p><p>再取出陣列中物件的特定值也很方便<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Nick'</span>, <span class="attr">age</span>: <span class="number">46</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Sebastine'</span>, <span class="attr">age</span>: <span class="number">53</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Johnason'</span>, <span class="attr">age</span>: <span class="number">27</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ages = people.map(<span class="function"><span class="params">person</span> =&gt;</span> person.age)</span><br><span class="line"><span class="comment">// ages: [46, 53, 27]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = people.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name)</span><br><span class="line"><span class="comment">// ages: ['Nick', 'Sebastine', 'Johnason']</span></span><br></pre></td></tr></table></figure></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>對陣列中每個元素執行 callback, 當某一個元素條件成立就會返回 true, 而當所有元素執行後皆返回 false, some 也會 return false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line">array.some(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">50</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">array.some(<span class="function"><span class="params">obj</span> =&gt;</span> obj &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>搭配 filter 可以快速做兩個陣列資料比對的篩選<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Nick'</span>, <span class="attr">age</span>: <span class="number">46</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Sebastine'</span>, <span class="attr">age</span>: <span class="number">53</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Johnason'</span>, <span class="attr">age</span>: <span class="number">27</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ages = [<span class="number">22</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">53</span>, <span class="number">48</span>]</span><br><span class="line"><span class="comment">// 從 people 中選出 age 符合 ages 中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matched = people.filter(<span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> ages.some(<span class="function"><span class="params">a</span> =&gt;</span> a === person.age)</span><br><span class="line"><span class="comment">// 當 ages.some 符合時會 return true, 此時 filter 接收到 true 後會將當下的 person 篩出</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">matched: [</span></span><br><span class="line"><span class="comment">&#123; name: 'Sebastine', age: 53 &#125;,</span></span><br><span class="line"><span class="comment">&#123; name: 'Johnason', age: 27 &#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">更簡潔作法：<span class="keyword">let</span> matched = people.filter(<span class="function"><span class="params">person</span> =&gt;</span> ages.some(<span class="function"><span class="params">a</span> =&gt;</span> a === person.age))</span><br></pre></td></tr></table></figure></p><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>與 some 相反，必須所有元素皆為 true 才會返回 true, 否則為 false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">87</span>]</span><br><span class="line">array.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj &lt; <span class="number">60</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">array.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj &gt; <span class="number">2</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>:::info<br>some：someone match =&gt; true<br>every：everyone match =&gt; true<br>:::</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>將陣列中的元素回傳出一個總和, 可傳入四個 args:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reduce(callback[accumlator, currentValue, currentIndex, array], initialValue)</span><br><span class="line">accumlator: 目前的總和</span><br><span class="line">currentValue: 現值</span><br><span class="line">currentIndex: 現值的索引</span><br><span class="line">array: 原陣列</span><br><span class="line">initialValue(optional): 初始值</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">345</span>, <span class="number">64</span>, <span class="number">532</span>]</span><br><span class="line"><span class="keyword">let</span> sum = array.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class="line"><span class="comment">// sum: 2 + 2 = 4</span></span><br><span class="line"><span class="comment">// sum: 4 + 345 = 349</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// sum: 945</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=== with initialValue ===</span></span><br><span class="line"><span class="keyword">let</span> sum = array.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur, <span class="number">55</span>)</span><br><span class="line"><span class="comment">// sum: 55 + 2 = 57</span></span><br><span class="line"><span class="comment">// sum: 57 + 2 = 59</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// sum: 1000</span></span><br></pre></td></tr></table></figure><hr><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop, obj[prop])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'a 1'</span></span><br><span class="line"><span class="comment">// 'b 2'</span></span><br><span class="line"><span class="comment">// 'c 3'</span></span><br></pre></td></tr></table></figure><p>for … in 是針對物件 key 值的遍歷方法, 不適合對陣列使用</p><h3 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h3><p>JavaScript6裡引入了一種新的循環方法，它就是for-of循環，它既比傳統的for循環簡潔，同時彌補了forEach和for … in循環的短板<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'hell'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'h'</span></span><br><span class="line"><span class="comment">// 'e'</span></span><br><span class="line"><span class="comment">// 'l'</span></span><br><span class="line"><span class="comment">// 'l'</span></span><br></pre></td></tr></table></figure><p>但以上 for 各自還是有自己的優點可取：</p><ul><li>for loop 可以自訂中斷點 break</li><li>for … of 不能像 forEach 一樣取得 index</li></ul><h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p>常用 sort 排序方法</p><ul><li><p>數列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">2</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升冪排序</span></span><br><span class="line">asc = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降冪排序</span></span><br><span class="line">desc = array.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line">     = [<span class="number">35</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = [<span class="string">'20020202T12:00:00Z'</span>, <span class="string">'20030303T13:00:00Z'</span>, ...]</span><br><span class="line">(timestamp 都可以)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升冪排序</span></span><br><span class="line">asc = date.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(a) - <span class="keyword">new</span> <span class="built_in">Date</span>(b)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降冪排序</span></span><br><span class="line">desc = date.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(b) - <span class="keyword">new</span> <span class="built_in">Date</span>(a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>字母</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = [<span class="string">'Dianna'</span>, <span class="string">'Renick'</span>, <span class="string">'Annie'</span>, <span class="string">'Irelia'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// A - Z</span></span><br><span class="line">string.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.toLowerCase().localeCompare(b.toLowerCase())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Z - A</span></span><br><span class="line">string.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> b.toLowerCase().localeCompare(a.toLowerCase())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>篩選數列中不重複的值</p><ol><li><p>filter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(element) === index</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> repeat = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(element) !== index</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br><span class="line"><span class="built_in">console</span>.log(repeat) <span class="comment">// [1, "a"]</span></span><br></pre></td></tr></table></figure></li><li><p>Set( ) <font size="1px">==<em>ES6 以上</em>==</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> repeat = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  result.has(item) ? repeat.add(item) : result.add(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// &#123;1, 2, "a", 3, "b"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(repeat) <span class="comment">// &#123;1, "a"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>:::warning<br>此作法 Set() 取出的結果皆為物件！！<br>:::</p><ol start="3"><li><p>Set( ) + Array.from()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br></pre></td></tr></table></figure></li><li><p>Set( ) + Spread</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">let</span> result = [...(<span class="keyword">new</span> <span class="built_in">Set</span>(array))]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, "a", 3, "b"]</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://guahsu.io/2017/06/JavaScript-Duplicates-Array/" target="_blank" rel="noopener">參照：JavaScript取出陣列重複/不重複值的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前幾天吳哲宇老師又重返直播，主題是 &lt;a href=&quot;https://www.youtube.com/watch?v=maFbo96YT8U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue + Socket 的配置教學&lt;/a&gt;，上次即時互動是用 Vue + firebase 模擬一個 LINE 的即時訊息傳遞，而這次的 Socket 是 realtime 界中的霸主，所以十點準時守在電腦前開播。&lt;/p&gt;
    
    </summary>
    
      <category term="Tricks" scheme="http://yoursite.com/categories/Tricks/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/11/hello-world/"/>
    <id>http://yoursite.com/2018/05/11/hello-world/</id>
    <published>2018-05-11T02:26:19.393Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>談談 Hexo 怎麼配置</title>
    <link href="http://yoursite.com/2018/05/10/hexo-things/"/>
    <id>http://yoursite.com/2018/05/10/hexo-things/</id>
    <published>2018-05-10T06:52:29.000Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>一開始接觸 Hexo 前就有聽聞他的支援套件很豐富，起手第一件就是先找個順眼的 theme，但因為每個主題提供的客製化程度都不一樣，所以挑了一圈最後還是選擇大眾口味的 Next，以下就大至分享我自己的 Next 設定以及整理一些解坑的方法。</p><a id="more"></a><p>在開始前有兩個名稱相同，位置設定卻大不同的檔案要分清楚：</p><ol><li><font color="#156c08" style="font-weight: bold">Next 配置檔</font>：/themes/_config.yml</li><li><font color="#780909" style="font-weight: bold">Hexo 配置檔</font>：/_config.yml</li></ol><p>有些配置會在這兩個 config 間設定，就暫且叫他們 <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> <font style="color: white; background-color: #780909; padding: 0 5px; border-radius: 3px;">Hexo config</font> 不然很容易搞混 … </p><h2 id="安裝-Next"><a href="#安裝-Next" class="headerlink" title="安裝 Next"></a>安裝 Next</h2><p>首先當然要先安裝 Next 本人，到 hexo 資料夾下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>再來找到 <font style="color: white; background-color: #780909; padding: 0 5px; border-radius: 3px;">Hexo config</font> 裡面的 theme 改成 next<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></p><p><small><a href="https://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">來源參照(大部分設定都可以在這找到)</a></small></p><h2 id="設定-Navbar"><a href="#設定-Navbar" class="headerlink" title="設定 Navbar"></a>設定 Navbar</h2><p><img src="https://i.imgur.com/tgIwioK.png" alt="Navbar"></p><p>Navbar 在一開始預設只有兩個，分別是首頁 (home) 跟歸檔 (archive)，首先在 <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> 找到下面這段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>把 tags 跟 categories 註解拿掉就會顯示在 Navbar 上，但這邊只是「顯示」，點進去還沒有頁面可以呈現，接著在 terminal 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>建立成功後會告訴你路徑位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>找到這個 index.md 後會看到預設內容，在下面新增一行 type: “categories”</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-10</span> <span class="number">11</span><span class="string">:27:42</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>tags 頁面比照 categories 作法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-05</span><span class="bullet">-10</span> <span class="number">11</span><span class="string">:27:42</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>要將文章歸類或附上標籤的話，只要在 post head 上新增 categories 跟 tags，格式如下<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 談談 Hexo 怎麼配置</span><br><span class="line">date: 2018-05-10 14:52:29</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Note</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p><strong>需要注意的是 tags 可以一直往下新增，但 categories 只會讀第一行去分類！</strong></p><p><em>搜尋功能我還在摸索 … 只是開著看起來比較完整但千萬不要去按</em></p><p><small><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener">來源參照</a></small></p><h2 id="隱藏文章"><a href="#隱藏文章" class="headerlink" title="隱藏文章"></a>隱藏文章</h2><p>Hexo 原先有一個新增 draft 文件的功能，但常常有些舊文章或已經發布的文章就是突然想要偷偷藏起來，就非常需要這個功能，先打開 themes/next/index.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>這份文件就是負責顯示你的文章列表，可以看到 ‘for post in page.posts’ 這個 for loop 把每一個文章都吐出來，所以要在這邊下個判斷是來篩選掉要隱藏的文章 (我用 visible: boolean 變數名稱可自訂)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class="line">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class="line">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;% if (post.visible) %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接著到文章內來定義 visible</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 談談 Hexo 怎麼配置</span><br><span class="line">date: 2018-05-10 14:52:29</span><br><span class="line">visible: true</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Note</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>到這邊列表頁就會去篩選每一篇文章的 visible 來決定顯示與否，但這樣還有一個麻煩處：<br><strong>我每次 hexo new 一個新的 post 都要去加他</strong></p><p>於是更懶也更進階的方式就是在每個 post 生成的 template 加入這個變數，打開 /scaffolds/post.md 看到如下的預設值<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>這就是每次 hexo new post-name 生出來的 post-name.md 中的架構，只要對他動點手腳<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">visible: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>我順便把 tags 跟 categories 的定義一併加上去，這樣就不需要每次都手動去設定 true false 了！</p><p><small><a href="http://forwardkth.github.io/2016/05/08/next-theme-post-visibility/" target="_blank" rel="noopener">來源參照</a></small></p><h2 id="代碼背景顏色設定"><a href="#代碼背景顏色設定" class="headerlink" title="代碼背景顏色設定"></a>代碼背景顏色設定</h2><p>這部分算是選配，next 預設代碼背色是白的，但個人比較偏好深色系，所以只好動手了 …<br>到  <font style="color: white; background-color: #156c08; padding: 0 5px; border-radius: 3px;">Next config</font> 找出下面這段就很清楚了 (註解都有寫)<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一開始接觸 Hexo 前就有聽聞他的支援套件很豐富，起手第一件就是先找個順眼的 theme，但因為每個主題提供的客製化程度都不一樣，所以挑了一圈最後還是選擇大眾口味的 Next，以下就大至分享我自己的 Next 設定以及整理一些解坑的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>入住 Hexo 的第一天</title>
    <link href="http://yoursite.com/2018/05/09/first-post/"/>
    <id>http://yoursite.com/2018/05/09/first-post/</id>
    <published>2018-05-09T09:49:10.000Z</published>
    <updated>2018-05-11T02:26:19.393Z</updated>
    
    <content type="html"><![CDATA[<p>開始寫扣以來就有被灌輸要有寫部落格紀錄學習進度的習慣，一方面是可以分享自己的想法，再者是前端無遠弗屆，腦子卻只有豆丁點大，可以幫助自己歸類記憶。</p><a id="more"></a><h2 id="Logdown"><a href="#Logdown" class="headerlink" title="Logdown"></a><a href="https://logdown.com/" target="_blank" rel="noopener">Logdown</a></h2><p>第一個用的是 Logdown 的系統，他給我的感覺很陽春 … 而那個時間點剛好是轉職不久，所以幾乎都是關於面試期間遇到的問題跟進度，回頭去看最後一篇在到職後的第一週就停止更新了 (´_ゝ`) 可能是寫日記這檔事自己覺得很監介，但之後還是有持續在用另一個筆記做紀錄</p><h2 id="Hack-MD"><a href="#Hack-MD" class="headerlink" title="Hack MD"></a><a href="https://hackmd.io/" target="_blank" rel="noopener">Hack MD</a></h2><p>這是第一次接觸 markdown 文件，一寫下去就很有親切感，因為基本上就是可以用 html css 來修飾變化，再來邊看文件記一下相關的 tag 怎麼輸出就很方便，到現在也用他在寫一些小技巧或筆記等的 code </p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>會知道 Hexo 是因為前陣子 Vue 有一個相關套件 Vuepress 正式發布，才讓我知道有這種可以把筆記回歸到編輯器的強大存在，以前找 google 總是看到一些部落格很簡潔酷炫，但怎麼好像每個人都會寫，還以為是前端應該要有的基礎部落格常識 … 現在看來原來是 Hexo 啊，還以為是同一個老師教的，至於不用 Vuepress 是因為考慮他剛問世，討論度跟支援套件相對較少，所以還是先用 Hexo 練練 markdown，之後也會再持續更新自己學到看到的東西。</p><p><a href="http://be-unick.s3-website-ap-northeast-1.amazonaws.com/" target="_blank" rel="noopener">uNickHow Website</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;開始寫扣以來就有被灌輸要有寫部落格紀錄學習進度的習慣，一方面是可以分享自己的想法，再者是前端無遠弗屆，腦子卻只有豆丁點大，可以幫助自己歸類記憶。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
  </entry>
  
</feed>
